#+TITLE: Gnu Emacs Confidguration
#+AUTHOR: Sylvain Ribstein
#+CATEGORY: config

* Table of content :TOC_4:
- [[#global-configuration][Global configuration]]
  - [[#packages][Packages]]
    - [[#sources][Sources]]
    - [[#configuration-use-package][Configuration =use-package=]]
    - [[#update-auto-package-update][update =auto-package-update=]]
    - [[#menu-paradox][menu =paradox=]]
  - [[#configuration][configuration]]
    - [[#global-variable][global variable]]
    - [[#customization][Customization]]
    - [[#update][update]]
  - [[#backup][Backup]]
  - [[#auto-save-mode][auto-save-mode]]
  - [[#apparence][apparence]]
    - [[#turn-off-mouse-interface][Turn off mouse interface]]
    - [[#theme][Theme]]
    - [[#font][font]]
      - [[#icons-all-the-icons][icons =all-the-icons=]]
- [[#mini-buffer][Mini-buffer]]
  - [[#parameter][parameter]]
  - [[#auto-completion-engine-ivy][Auto-completion engine =ivy=]]
    - [[#improved-ivy-file-browsing-ivy-explorer][improved ivy file browsing =ivy-explorer=]]
  - [[#search-in-current-buffer-swiper][search in current buffer =swiper=]]
  - [[#search-somewhere-else-m-xdiredetc-smexcounsel][search somewhere else "M-x/dired/etc" =smex,counsel=]]
  - [[#improved-text-search-ripgrep][improved text search =ripgrep=]]
  - [[#modify-grep-result-wgrep][modify grep result =wgrep=]]
  - [[#open-with-sudo-auto-sudoedit][open with sudo =auto-sudoedit=]]
  - [[#hintsinformation-of-current-mark-eldoc][hints/information of current mark =eldoc=]]
  - [[#keystroke-helper-which-key][keystroke helper =which-key=]]
- [[#mode-line][Mode-line]]
  - [[#parameter-1][Parameter]]
  - [[#mode-icons-delight][Mode icons =delight=]]
  - [[#indicate-position-on-file---nyan][Indicate position on file   =nyan=]]
- [[#interface-interaction][Interface interaction]]
  - [[#buffer][Buffer]]
    - [[#parameter-2][parameter]]
    - [[#kill-current-buffer-without-asking][kill current buffer without asking]]
    - [[#order-buffer-list-ibuffer][order buffer list =ibuffer=]]
    - [[#dimme-non-focus-buffer-dimmer][dimme non focus buffer =dimmer=]]
  - [[#window][Window]]
    - [[#parameter-3][parameter]]
    - [[#switch-window-ace-window][switch window =ace-window=]]
    - [[#window-configuration-winner-mode][window configuration =winner-mode=]]
    - [[#toggle-windows-split][Toggle windows split]]
    - [[#scrolling][Scrolling]]
    - [[#cursor-beacon-hl][cursor =beacon= =hl=]]
- [[#edition][Edition]]
  - [[#parameter-4][Parameter]]
  - [[#my-biding][my biding]]
  - [[#delete-all-space-in-front-hungry-delete][delete all space in front =hungry-delete=]]
  - [[#move-text-move-text][Move text =move-text=]]
  - [[#whitespace-whitespace][Whitespace =whitespace=]]
  - [[#auto-completion-company][Auto-Completion =company=]]
  - [[#edit-all-occurence-iedit][Edit all occurence =iedit=]]
  - [[#auto-indentation-aggressive-indent][Auto-indentation =aggressive-indent=]]
  - [[#decoration][Decoration]]
    - [[#colorize-background-of-text-color-like-green-rainbow-mode][colorize background of text color like green =rainbow-mode=]]
    - [[#show-line-at-80-char-fill-column-indicator][Show line at 80 char =fill-column-indicator=]]
    - [[#color-parenthesis-rainbow-delimiters][Color parenthesis =rainbow-delimiters=]]
  - [[#specific][Specific]]
    - [[#programming-language][Programming language]]
      - [[#language-server][Language server]]
      - [[#protocol-protobuf][protocol =protobuf=]]
      - [[#shell-script][Shell script]]
      - [[#golang][Golang]]
      - [[#rust][Rust]]
      - [[#ocaml][OCaml]]
      - [[#python][Python]]
      - [[#nix][nix]]
    - [[#pdf-pdf-tools][Pdf =pdf-tools=]]
    - [[#csv-csv-mode][csv =csv-mode=]]
    - [[#description-language][Description language]]
      - [[#json][=Json=]]
      - [[#markdown][=Markdown=]]
      - [[#yaml][=Yaml=]]
- [[#project][Project]]
  - [[#interaction-projectile][interaction =projectile=]]
  - [[#git][Git]]
    - [[#interaction-magit][Interaction =magit=]]
    - [[#add-git-message-git-commit][add git message =git-commit=]]
    - [[#forge-forge][Forge =forge=]]
    - [[#current-modification-git-gutter][current modification =git-gutter=]]
    - [[#show-last-commit-modification-git-timemachine][show last commit modification =git-timemachine=]]
- [[#system-interaction][System interaction]]
  - [[#file-explorer-dired][File explorer =dired=]]
  - [[#shell-command-exec-path-from-shell][shell command =exec-path-from-shell=]]
  - [[#environment-variable][Environment variable]]
  - [[#system-notification-alert][system notification =alert=]]
- [[#software-interface][software interface]]
  - [[#password-manager-pass][Password manager =pass=]]
  - [[#mpd-interface-mpdel][mpd interface =mpdel=]]
- [[#organisercalendarlinkeretc-org-mode][Organiser/calendar/linker/etc =org-mode=]]
  - [[#table-of-content-toc-org][Table of content =toc-org=]]
  - [[#org-indentation-org-indent][Org indentation =org-indent=]]
  - [[#bullets-org-bullets][Bullets =org-bullets=]]
  - [[#org-face][org face]]
  - [[#org-agenda][Org agenda]]
    - [[#improved-agenda-view-org-super-agenda][improved agenda view =org-super-agenda=]]
    - [[#calendar-view-calfw][calendar view =calfw=]]
    - [[#caldav-sync-org-caldav][Caldav sync =org-caldav=]]
    - [[#notification-org-wild-notifier][notification =org-wild-notifier=]]
  - [[#org-search-ivy-omni-org][Org search =ivy-omni-org=]]
  - [[#org-link][Org link]]
  - [[#capture-org-capture][Capture =org-capture=]]
  - [[#org-export][org export]]
    - [[#use-pandoc-to-export-ox-pandoc][use pandoc to export =ox-pandoc=]]
- [[#read-only-major-mode][read-only major-mode]]
  - [[#mail][Mail]]
    - [[#mu-mu4e][mu =mu4e=]]
  - [[#compilation][compilation]]
  - [[#dashboard-dashboard][Dashboard =dashboard=]]
  - [[#web-browser-xwwp-follow-link][Web browser =xwwp-follow-link=]]
- [[#to-order][to order]]
  - [[#diff-diffview][diff =diffview=]]
- [[#to-do][TO-DO]]
  - [[#contact][contact]]
    - [[#dav-directory-vdirel][dav directory =vdirel=]]
    - [[#emacs-format-bbdb][emacs format =bbdb=]]
    - [[#new-bbdb-ebdb][new bbdb =ebdb=]]
  - [[#make-qutebrowser-default-browser][make qutebrowser default browser]]
- [[#not-used-anymore][not used anymore]]
  - [[#file-explorer-ranger][file explorer =ranger=]]
  - [[#gnus-gnus][Gnus =gnus=]]
  - [[#journal-org-journal][Journal =org-journal=]]
  - [[#opam-opam-update-env][opam =opam-update-env=]]

* Global configuration
Here is configuration that is used across all emacs mode
** Packages
*** Sources
The sources of package. So
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq package-archives
        '(("gnu" . "http://elpa.gnu.org/packages/") ;; Official
          ("melpa" . "http://melpa.org/packages/")  ;; Unofficial but use everywhere
          ("org" . "http://orgmode.org/elpa/")      ;; Org-mode package source
          ))
#+END_SRC
*** Configuration =use-package=
Use package allow to install and configure package in a fancy way.
It permit also to defer loading of package.
src: https://github.com/jwiegley/use-package

#+BEGIN_SRC emacs-lisp :tangle yes
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (use-package use-package-ensure-system-package
    :ensure t
    :custom
    (use-package-always-ensure t)) ; Avoid the :ensure keyword for each package
  (use-package use-package-ensure-system-package)
#+END_SRC
*** update =auto-package-update=
Update current package
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package auto-package-update
    :defer t
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-delete-old-versions  t)
    (auto-package-update-hide-results         t)
    (auto-package-update-prompt-before-update ))

  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame) (auto-package-update-maybe)))
    (progn (auto-package-update-maybe)))
#+END_SRC
*** TODO menu =paradox=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package paradox
    :init (paradox-enable)
    :custom
    (paradox-column-width-package 27)
    (paradox-column-width-version 13)
    (paradox-execute-asynchronously t)
    (paradox-hide-wiki-packages t)
    (paradox-github-token (cadr (auth-source-user-and-password "api.github.com" "sribst^paradox")))
    :config
    (paradox-enable)
    (remove-hook 'paradox-after-execute-functions #'paradox--report-buffer-print))
#+END_SRC

** configuration
*** global variable
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq-default
   inhibit-startup-screen t ; Disable start-up screen
   initial-scratch-message "" ; Empty the initial *scratch* buffer
   initial-major-mode 'text-mode ; major mode of  *scratch* buffer
   ad-redefinition-action 'accept ; Silence warnings for redefinition
   fill-column 80 ; Set width for automatic line breaks
   help-window-select t ; Focus new help windows when opened
   load-prefer-newer t ; Prefers the newest version of a file
   scroll-conservatively most-positive-fixnum ; Always scroll by one line
   )
  (set-default-coding-systems 'utf-8) ; Default to utf-8 encoding
  (make-variable-buffer-local 'compile-command) ; be able to set it as a dir-locals
#+END_SRC
*** Customization
To avoid overloading the GNU Emacs custormization =init.el= file made by the
user with the UI, I add the generated code in a separate file.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq-default custom-file (expand-file-name "~/.emacs.d/custom.el"))
  (when (file-exists-p custom-file) (load custom-file t))
#+END_SRC

*** update
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package async)
  (defvar *config-file* (expand-file-name "config.org" user-emacs-directory)
    "The configuration file.")

  (defvar *config-last-change* (nth 5 (file-attributes *config-file*))
    "Last modification time of the configuration file.")

  (defvar *show-async-tangle-results* nil "Keeps *emacs* async buffers around for later inspection.")

  (defun my/config-updated ()
    "Checks if the configuration file has been updated since the last time."
    (time-less-p *config-last-change*
                 (nth 5 (file-attributes *config-file*))))

  (defun my/async-babel-tangle (org-file)
    "Tangles the org file asynchronously."
    (let ((init-tangle-start-time (current-time))
          (file (buffer-file-name))
          (async-quiet-switch "-q"))
      (async-start
       `(lambda ()
          (require 'org)
          (org-babel-tangle-file ,org-file))
       (unless *show-async-tangle-results*
         `(lambda (result)
            (if result
                (message "SUCCESS: %s successfully tangled (%.2fs)."
                         ,org-file
                         (float-time (time-subtract (current-time)
                                                    ',init-tangle-start-time)))
              (message "ERROR: %s as tangle failed." ,org-file)))))))

  (defun my/config-tangle ()
    "Tangles the org file asynchronously."
    (when (my/config-updated)
      (setq *config-last-change*
            (nth 5 (file-attributes *config-file*)))
      (my/async-babel-tangle *config-file*)))

  (defun my/reload-config ()
    "reload config of emacs on-the-fly"
    (interactive)
    (load-file (expand-file-name "config.el" user-emacs-directory)))

  (defun my/update-config ()
    "Force the update of the configuration."
    (interactive)
    (org-babel-load-file (expand-file-name "config.org" user-emacs-directory)))
#+END_SRC

#+RESULTS:
: my/force-update-config

** Backup
It is important to have a stable backup environment.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package files
    :ensure nil ; don't need to ensure as it is default package
    :custom
    (backup-directory-alist `(("." . "~/.emacs.d/backup")))
    (delete-old-versions -1)
    (vc-make-backup-files t)
    (version-control t))
#+END_SRC

** auto-save-mode
#+begin_src emacs-lisp :tangle yes
  (auto-save-visited-mode t)
#+END_SRC


** apparence
*** Turn off mouse interface
Since I never use the mouse with GNU Emacs, I prefer not to use certain
graphical elements as seen as the menu bar, toolbar, scrollbar and tooltip that
I find invasive.
#+BEGIN_SRC emacs-lisp :tangle yes
  (menu-bar-mode -1)      ; Disable the menu bar
  (scroll-bar-mode -1)    ; Disable the scroll bar
  (tool-bar-mode -1)      ; Disable the tool bar
  (tooltip-mode -1)       ; Disable the tooltips
#+END_SRC
*** Theme
xresources-theme qui respect les couleurs de Xressources
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package xresources-theme
    :init
    (defvar my/theme-window-loaded nil)
    (defvar my/theme-terminal-loaded nil)
    (defvar my/theme 'xresources)
    (if (daemonp)
        (add-hook 'after-make-frame-functions
                  (lambda (frame)
                    (select-frame frame)
                    (if (window-system frame)
                        (unless my/theme-window-loaded
                          (if my/theme-terminal-loaded
                              (enable-theme my/theme)
                            (progn
                              (load-theme my/theme t)
                              (set-face-background 'hl-line (x-get-resource "color8" ""))))
                          (setq my/theme-window-loaded t))
                      (unless my/theme-terminal-loaded
                        (if my/theme-window-loaded
                            (enable-theme my/theme)
                          (progn
                            (load-theme my/theme t)
                            (set-face-background 'hl-line (x-get-resource "color8" ""))))
                        (setq my/theme-terminal-loaded t)))))
      (progn
        (load-theme my/theme t)
        (set-face-background 'hl-line (x-get-resource "color8" ""))
        (if (display-graphic-p)
            (setq my/theme-window-loaded t)
          (setq my/theme-terminal-loaded t)))))
#+END_SRC

*** font
**** icons =all-the-icons=
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (set-frame-font "ProggyClean-14")
  (use-package all-the-icons)
#+END_SRC
* Mini-buffer
** parameter
#+BEGIN_SRC emacs-lisp :tangle yes
  (fset 'yes-or-no-p 'y-or-n-p) ; Replace yes/no prompts with y/n
#+END_SRC

** Auto-completion engine =ivy=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ivy
    :demand ;force-loading
    :delight
    :bind ("C-x B" . ivy-switch-buffer-other-window)
    :custom
    (ivy-count-format "(%d/%d) ")
    (ivy-use-virtual-buffers t)
    (ivy-extra-directories nil)
    (ivy-magic-slash-non-match-action 'ivy-magic-slash-non-match-create)
    :config (ivy-mode))

  (use-package ivy-rich
    :after ivy
    :init (setq ivy-rich-parse-remote-file-path t)
    :config (ivy-rich-mode 1))

  (use-package all-the-icons-ivy
    :after ivy
    :config (all-the-icons-ivy-setup))
#+END_SRC
: t

*** TODO improved ivy file browsing =ivy-explorer=
not working  'Error in post-command-hook (ivy--queue-exhibit): (arith-error)'

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package ivy-explorer
  ;;  :after ivy counsel
  ;;  :config (ivy-explorer-mode 1))
#+END_SRC

** search in current buffer =swiper=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package swiper
    :after ivy
    :config
    ;; (setq ivy-display-style 'fancy)
    (custom-set-faces
     `(swiper-line-face ((t (:background ,(x-get-resource "color12" "")))))
     `(swiper-match-face-1 ((t (:background ,(x-get-resource "color11" "")))))
     `(swiper-match-face-2 ((t (:background ,(x-get-resource "color9" "") :weight bold))))
     `(swiper-match-face-3 ((t (:background ,(x-get-resource "color10" "") :weight bold))))
     `(swiper-match-face-4 ((t (:background ,(x-get-resource "color13" "") :weight bold))))
     `(swiper-minibuffer-match-face-1 ((t (:background ,(x-get-resource "color11" "")))))
     `(swiper-minibuffer-match-face-2 ((t (:background ,(x-get-resource "color9" "") :weight bold))))
     `(swiper-minibuffer-match-face-3 ((t (:background ,(x-get-resource "color10" "") :weight bold))))
     `(swiper-minibuffer-match-face-4 ((t (:background ,(x-get-resource "color13" "") :weight bold)))))
    :bind ("C-s" . swiper))
#+END_SRC

** search somewhere else "M-x/dired/etc" =smex,counsel=
smex order last command/mode by most used and recent

counsel is intergrate launcher for exec alternative ("M-x")
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package smex)
  (use-package counsel
    :after ivy smex
    :delight
    :bind ("C-c r" . counsel-recentf)
    :init (counsel-mode 1))
#+END_SRC

** improved text search =ripgrep=
ripgrep is an alternative of grep that is faster and respect project (.gitignore, ...)
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ripgrep
    :delight
    :ensure-system-package (rg . "yay -S ripgrep"))
#+END_SRC

** modify grep result =wgrep=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package wgrep
    :delight)
#+END_SRC

** open with sudo =auto-sudoedit=
automaticaly open with tramp when needed
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package tramp
    :ensure nil
    :custom (tramp-default-method "sshx"))
  (use-package auto-sudoedit
    :init (auto-sudoedit-mode 1))
  (use-package counsel-tramp
    :bind ("C-c t" . counsel-tramp)
    :after counsel)
#+END_SRC

** hints/information of current mark =eldoc=
Provides minibuffer hints when working with Emacs Lisp.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package eldoc
    :delight
    :hook ((prog-mode org-mode) . eldoc-mode))
#+END_SRC
** keystroke helper =which-key=
=which-key= show all possible completion after a keystroke
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package which-key
    :delight
    :config (which-key-mode))
#+END_SRC
* Mode-line
** Parameter
#+BEGIN_SRC emacs-lisp :tangle yes
  (column-number-mode 1) ; Show the column number
#+END_SRC
** Mode icons =delight=
delight is a way of showing wich major/minor is currently open
It's show which mode on the main bar
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package delight)
#+END_SRC
** Indicate position on file   =nyan=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package nyan-mode
    :config (nyan-mode)
    :custom
    (nyan-animate-nyancat t)
    (nyan-wavy-trail t)
    (nyan-bar-length 15))
#+END_SRC
* Interface interaction
** Buffer
*** parameter
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq view-read-only t ) ; Always open read-only buffers in view-mode
  (setq cursor-in-non-selected-windows t) ; Hide the cursor in inactive windows
#+END_SRC
*** kill current buffer without asking
Don't ask before killing a buffer. I know what I'm doing.
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key [remap kill-buffer] #'kill-current-buffer)
#+END_SRC

*** order buffer list =ibuffer=
ibuffer is a better buffer mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ibuffer
    :bind ("C-x C-b" . ibuffer)
    :custom
    (ibuffer-saved-filter-groups
     '(("default"
        ("org"   (name . "^.*org$"))
        ("magit" (or (mode . magit-mode)
                     (name . "^magit.*$" )))
        ("dired" (mode . dired-mode))

        ("IRC"   (or (mode . circe-channel-mode) (mode . circe-server-mode)))
        ("web"   (or (mode . web-mode) (mode . js2-mode)))
        ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
        ("programming" (or
                        (mode . java-mode)
                        (mode . groovy-mode)
                        (mode . conf-space-mode)))
        ("emacs" (or
                  (name . "^\\*scratch\\*$")
                  (name . "^\\*Messages\\*$")))
        ("Ediff" (name . "^\\*Ediff.*\\*$"))
        )))
    :hook ('ibuffer-mode .
                         (lambda ()
                           (ibuffer-auto-mode 1)
                           (ibuffer-switch-to-saved-filter-groups "default"))))

  (use-package ibuffer-projectile
    :after ibuffer
    ;; :config
    ;; (setq ibuffer-formats
    ;;    '((mark modified read-only " "
    ;;            (name 18 18 :left :elide)
    ;;            " "
    ;;            (size 9 -1 :right)
    ;;            " "
    ;;            (mode 16 16 :left :elide)
    ;;            " "
    ;;            project-relative-file)))
    :hook  ('ibuffer-mode .
                          (lambda ()
                            (ibuffer-projectile-set-filter-groups)
                            (unless (eq ibuffer-sorting-mode 'alphabetic)
                              (ibuffer-do-sort-by-alphabetic)))))
#+END_SRC

#+RESULTS:
| lambda | nil | (ibuffer-projectile-set-filter-groups) | (unless (eq ibuffer-sorting-mode (quote alphabetic)) (ibuffer-do-sort-by-alphabetic)) |
| lambda | nil | (ibuffer-auto-mode 1)                  | (ibuffer-switch-to-saved-filter-groups default)                                       |

*** dimme non focus buffer =dimmer=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dimmer
    :init (dimmer-mode t))
#+END_SRC

** Window
*** parameter
split-width-threshold nil does not work for me
need to find correct config -> use toggle-windows-split atm
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (setq split-width-threshold nil) ; default split is vertical
(setq split-height-threshold 180)
(setq split-width-threshold 90)
#+END_SRC


*** switch window =ace-window=
ace window allow to simply switch when only 2 window or to choose
which window with key when multiple buff
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ace-window
    :bind
    (("C-x o" . ace-window)
     ("M-o" . ace-window))
    :init
    (setq aw-keys '(?j ?k ?l ?m ?u ?i ?o ?p))
    (setq aw-scope 'frame))
#+END_SRC

*** window configuration =winner-mode=
Allow to undo and redo buffer configuration to easily open one buffer than
switch back to multiple open buffer.
- "C . b"  -> undo
- "C . f" -> redo
  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package winner
      :ensure nil
      :bind (("C-c b" . winner-undo)
             ("C-c f" . winner-redo))
      :init (winner-mode))
  #+END_SRC

  #+RESULTS:
  : winner-redo

*** Toggle windows split
switch layout when two buffers are open
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun toggle-window-split ()
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
               (next-win-buffer (window-buffer (next-window)))
               (this-win-edges (window-edges (selected-window)))
               (next-win-edges (window-edges (next-window)))
               (this-win-2nd (not (and (<= (car this-win-edges)
                                           (car next-win-edges))
                                       (<= (cadr this-win-edges)
                                           (cadr next-win-edges)))))
               (splitter
                (if (= (car this-win-edges)
                       (car (window-edges (next-window))))
                    'split-window-horizontally
                  'split-window-vertically)))
          (delete-other-windows)
          (let ((first-win (selected-window)))
            (funcall splitter)
            (if this-win-2nd (other-window 1))
            (set-window-buffer (selected-window) this-win-buffer)
            (set-window-buffer (next-window) next-win-buffer)
            (select-window first-win)
            (if this-win-2nd (other-window 1))))))

  (define-key ctl-x-4-map "t" 'toggle-window-split)
#+END_SRC

*** Scrolling
Start scrolling when nm left of line < 10 top and bottom
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq scroll-margin 5)
#+END_SRC

*** cursor =beacon= =hl=
=hl= Highlight current lign with diff background color
=beacon= beam-color whenever cursor change position

#+begin_src emacs-lisp :tangle yes
  (global-hl-line-mode 1) ; Hightlight current line

  (use-package beacon
    :when (window-system)
    :custom
    (beacon-color (x-get-resource "color13" ""))
    :config (beacon-mode 1))
#+end_src

#+RESULTS:
: t

* Edition
** Parameter
basic default value to enable
#+BEGIN_SRC emacs-lisp :tangle yes
  (put 'upcase-region   'disabled nil) ; Allow C-x C-u
  (put 'downcase-region 'disabled nil) ; Allow C-x C-l
  (show-paren-mode 1) ; Show the parenthesis
  (transient-mark-mode t) ; same mark mouse or keyboard
  (setq blink-cursor-mode nil) ; the cursor wont blink
  (setq-default indent-tabs-mode nil) ; use space instead of tab to indent
  (delete-selection-mode t) ; when writing into marked region delete it
  (setq tab-width 4) ; Set width for tabs

  (use-package mouse
    :ensure nil
    :bind ("C-c y" . yank-primary-selection)
    :init
    (defun yank-primary-selection ()
      (interactive)
      (insert (gui-get-primary-selection))))
#+END_SRC
** my biding
#+begin_src emacs-lisp :tangle yes
  (use-package replace
    :ensure nil
    :bind
    (("C-c C-r s" . replace-string)
     ("C-c C-r r" . replace-regexp))
    )
#+end_src

** delete all space in front =hungry-delete=
#+begin_src emacs-lisp :tangle yes
  (use-package hungry-delete
    :config
    (global-hungry-delete-mode))
#+end_src

** Move text =move-text=
Moves the current line (or if marked, the current region's, whole lines).
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package move-text
    :bind
    (("M-p" . move-text-up)
     ("M-n" . move-text-down)))
#+END_SRC

** Whitespace =whitespace=
It is often annoying to see unnecessary blank spaces at the end of a line or
file.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package whitespace
    :delight
    :hook
    (((prog-mode text-mode org-mode) . whitespace-mode)
     (before-save . delete-trailing-whitespace)
     )
    :custom
    (whitespace-style '(face trailing tabs lines-tail newline empty
                             tab-mark newline-mark))
    (whitespace-display-mappings ; SPACE 32 「 」, 183 MIDDLE DOT 「·」, 46 ; FULL STOP 「.」
     '((space-mark 32 [183] [46])
       (newline-mark 10 [182 10]) ; LINE FEED
       (tab-mark 9 [9655 9] [92 9])))) ; tab
#+END_SRC

** Auto-Completion =company=

=company= provides auto-completion at point and to Displays a small pop-in
containing the candidates.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company
    :delight
    :init (global-company-mode)
    :config
    (bind-key [remap completion-at-point] #'company-complete company-mode-map)
    :custom

    (company-begin-commands '(self-insert-command))
    (company-idle-delay 0.2)
    (company-minimum-prefix-length 3)
    (company-show-numbers t)
    (company-tooltip-align-annotations t))

  (use-package company-quickhelp          ; Documentation popups for Company
    :delight :hook (global-company-mode . company-quickhelp-mode))

  (use-package company-box ; icons for company-mode-map
    :delight
    :hook (company-mode . company-box-mode))
#+END_SRC
** Edit all occurence =iedit=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package iedit
    :bind ("C-c e" . iedit-mode))
#+END_SRC

#+RESULTS:
: iedit-mode
** Auto-indentation =aggressive-indent=
=aggressive-indent-mode= is a minor mode that keeps your code *always*
indented.  It reindents after every change, making it more reliable than
electric-indent-mode.

Aggressive indent is too aggressive, I need to make it a bit less stronger
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package aggressive-indent
    :delight ""
    :hook (tuareg-mode . aggressive-indent-mode)
    :custom
    (aggressive-indent-comments-too t)
    (aggressive-indent-sit-for-time 0.2)  )
#+END_SRC

** Decoration
*** colorize background of text color like green =rainbow-mode=
Colorize colors as text with their value.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-mode
    :delight
    :custom
    ;; (rainbow-x-colors-major-mode-list '(prog-mode org-mode))
    (rainbow-x-colors t)
    (rainbow-r-colors t)
    :hook ((prog-mode org-mode) .  rainbow-mode))
#+END_SRC

*** TODO Show line at 80 char =fill-column-indicator=
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package fill-column-indicator
  ;; :delight
  ;; :custom
  ;; (fci-rule-color (x-get-resource "color1" ""))
  ;; (fci-rule-width '1)
  ;; :hook (prog-mode . fci-mode))
#+END_SRC
*** Color parenthesis =rainbow-delimiters=

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :delight
    :hook ((prog-mode org-mode) . rainbow-delimiters-mode))
#+END_SRC

** Specific
*** Programming language
**** TODO Language server
use bind-keymap instead
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package lsp-mode
  ;;  :after which-key ivy company
  ;;  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  ;;  :bind-keymap
  ;;  ("C-c i" .  lsp-command-map)
  ;;  ;; :init (setq lsp-keymap-prefix "C-c i")
  ;;  :hook
  ;;  (prog-mode . lsp-mode)
  ;;  (lsp-mode . lsp-enable-which-key-integration))
  ;;  :commands lsp)
  ;;  ;; optionally
  ;;  (use-package lsp-ui :commands lsp-ui-mode)
  ;;  (use-package company-lsp :commands company-lsp)
  ;;  ;; if you are helm user
  ;;  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+END_SRC
**** protocol =protobuf=
#+begin_src emacs-lisp :tangle yes
  (use-package protobuf-mode)
#+end_src
**** Shell script
#+begin_src emacs-lisp :tangle yes
  (use-package shfmt
    :ensure-system-package shfmt
    ;; :hook (sh-mode . sh-electric-here-document-mode)
    )
#+end_src
**** Golang
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package go-mode)
#+END_SRC
**** Rust
cargo.el gives set of combination to perform cargo (rust builder) task

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rust-mode
    :mode ("\\.rust$" . rust-mode)
    :commands (rust-mode))

  (use-package cargo
    :after rust-mode
    :hook (rust-mode . cargo-minor-mode))

  (use-package racer
    :after rust-mode
    :bind (:map rust-mode-map
                ("C-c C-t" . racer-describe))
    :hook ((rust-mode . racer-mode)
           (racer-mode . eldoc-mode))
    :config
    (advice-add 'rust-compile :before #'save-current-buffer-if-modified))
#+END_SRC
**** OCaml
***** TODO major mode =tuareg=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package tuareg
    :mode ("\\.ml[ily]?$" . tuareg-mode)
    :delight " "
    :init
    (dolist
        (var (car (read-from-string
                   (shell-command-to-string "opam config env --sexp"))))
      (setenv (car var) (cadr var))))
#+END_SRC

soon gopcaml will have a emacs package to install I guess. keep an eye on
https://gitlab.com/gopiandcode/gopcaml-mode
***** helpers

****** builder =dune=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dune :after tuareg)
#+END_SRC

****** completion, type, doc,... =merlin=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package merlin
    :hook ((tuareg-mode caml-mode) . merlin-mode)
    :bind (:map merlin-mode-map
                ("M-." . merlin-locate)
                ("M-," . merlin-pop-stack))
    :delight ""
    :custom
    (merlin-locate-preference 'ml)
    (merlin-command 'opam)
    :config
    (with-eval-after-load 'company
      (add-hook 'merlin-mode-hook 'company-mode)
      (add-to-list 'company-backends 'merlin-company-backend)))

  (use-package merlin-eldoc
    :after merlin
    :custom
    (eldoc-echo-area-use-multiline-p t) ; use multiple lines when necessary
    (merlin-eldoc-max-lines 8)          ; but not more than 8
    (merlin-eldoc-type-verbosity 'min)  ; don't display verbose types
    (merlin-eldoc-function-arguments nil) ; don't show function arguments
    (merlin-eldoc-doc t)                ; don't show the documentation
    :bind (:map merlin-mode-map
                ("C-c o p" . merlin-eldoc-jump-to-prev-occurrence)
                ("C-c o n" . merlin-eldoc-jump-to-next-occurrence))
    :hook (tuareg-mode . merlin-eldoc-setup))
#+END_SRC

****** repl =utop=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package utop
    :delight " "
    :custom
    (utop-command "utop -emacs")
    :hook
    (tuareg-mode . utop-minor-mode))
#+END_SRC

****** format =ocp-indent,ocamlformat=
it format also dune file, which is annoying
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package ocp-indent :after tuareg)

  (use-package ocamlformat
    :ensure nil
    :ensure-system-package (ocamlformat . "opam install ocamlformat")
    :config
    (defun my/deactivate-ocamlformat ()
      (interactive)
      (setq ocamlformat-enable 'disable))
    (defun my/activate-ocamlformat ()
      (interactive)
      (setq ocamlformat-enable 'enable))
    :custom
    (ocamlformat-show-errors 'echo)
    (ocamlformat-enable 'enable)
    :bind (:map tuareg-mode-map ("C-M-<tab>" . #'ocamlformat))
    :hook
    (before-save
     .
     (lambda ()
       (when
           (eq major-mode 'tuareg-mode)
         (ocamlformat-before-save))))
    :after tuareg)
#+END_SRC

#+RESULTS:
: ocamlformat

**** Python
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package elpy
    :ensure-system-package (markdown . "yay -S python")
    :defer t
    :init
    (advice-add 'python-mode :before 'elpy-enable))
#+END_SRC
**** nix
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package nix-mode
    :mode ("\\.nix\\'" "\\.nix.in\\'"))
  (use-package nix-drv-mode
    :ensure nix-mode
    :mode "\\.drv\\'")
  (use-package nix-shell
    :ensure nix-mode
    :commands (nix-shell-unpack nix-shell-configure nix-shell-build))
  (use-package nix-repl
    :ensure nix-mode
    :commands (nix-repl))
#+END_SRC
*** Pdf =pdf-tools=
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package pdf-tools
  ;;        :mode "\\.pdf\\"
  ;;        :init (pdf-tools-install :no-query))

  ;;        (use-package pdf-view
  ;;        :ensure nil
  ;;        :after pdf-tools
  ;;        :bind (:map pdf-view-mode-map
  ;;        ("C-s" . isearch-forward)
  ;;        ("d" . pdf-annot-delete)
  ;;        ("h" . pdf-annot-add-highlight-markup-annotation)
  ;;        ("t" . pdf-annot-add-text-annotation))
  ;;                    :custom
  ;;                    (pdf-view-display-size 'fit-page)
  ;;                    (pdf-view-resize-factor 1.1)
  ;;                    (pdf-view-use-unicode-ligther nil))
#+End_SRC
*** csv =csv-mode=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package csv-mode
    :mode "\\.[Cc][Ss][Vv]\\'"
    :custom
    (csv-separators '(";" ",")
                    ))
#+END_SRC
*** Description language
**** =Json=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package json-mode
    :mode ("\\.json$" . json-mode))
#+END_SRC
**** =Markdown=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package markdown-mode
    :ensure-system-package (markdown . "yay -S markdown")
    :delight " "
    :mode ("INSTALL\\'" "CONTRIBUTORS\\'" "LICENSE\\'" "README\\'" "\\.markdown\\'" "\\.md\\'"))
#+END_SRC
**** =Yaml=
#+begin_src emacs-lisp :tangle yes
  (use-package yaml-mode
    :delight " "
    :mode "\\.yml\\'"
    )
#+end_src

* Project
** TODO interaction =projectile=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package projectile
    :delight " "
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :custom
    (projectile-grep-default-files "src/")
    (projectile-project-search-path
     '("~/CS/Cryptium/" "~/CS/Pers/" "~/CS/VGED/" "~/CS/Wagner/"))
    (projectile-completion-system 'ivy)
    :init (projectile-mode))

  (use-package counsel-projectile
    :after counsel projectile
    :init (counsel-projectile-mode)
    :config
    (counsel-projectile-modify-action
     'counsel-projectile-switch-project-action
     '((default counsel-projectile-switch-project-action-vc)))
    )

  (use-package org-projectile
    :after projectile org
    :bind
    ("C-c n p" . org-projectile-project-todo-completing-read)
    :custom
    (org-projectile-per-project-filepath "todo.org")
    :config
    (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
    (org-projectile-capture-template
     (format "%s" "* TODO %?")
     (org-projectile-per-project)
     (progn (push (org-projectile-project-todo-entry) org-capture-templates))))
#+END_SRC

** Git
*** Interaction =magit=
It is quite common to work on Git repositories, so it is important to have a
configuration that we like.
#+BEGIN_QUOTE
[[https://github.com/magit/magit][Magit]] is an interface to the version control system Git, implemented as an Emacs
package. Magit aspires to be a complete Git porcelain. While we cannot (yet)
claim that Magit wraps and improves upon each and every Git command, it is
complete enough to allow even experienced Git users to perform almost all of
their daily version control tasks directly from within Emacs. While many fine
Git clients exist, only Magit and Git itself deserve to be called porcelains.
[[https://github.com/tarsius][Jonas Bernoulli]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package magit
    :bind ("C-c g" . magit-status)
    :hook
    (after-save . magit-after-save-refresh-buffers)
    :delight " ")

  ;; (use-package magit-delta
  ;;   :after magit
  ;;   :hook (magit-mode . magit-delta-mode))


#+END_SRC

*** add git message =git-commit=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package git-commit
    :after magit
    :hook (git-commit-mode . my/git-commit-auto-fill-everywhere)
    :custom (git-commit-summary-max-length 50)
    :preface
    (defun my/git-commit-auto-fill-everywhere ()
      "Ensures that the commit body does not exceed 72 characters."
      (setq fill-column 72)
      (setq-local comment-auto-fill-only-comments nil)))

  ;; (use-package magit-org-todos
  ;;   :after magit
  ;;   :config
  ;;   (magit-org-todos-autoinsert))
#+END_SRC

*** Forge =forge=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package forge :after magit :delight)
#+END_SRC
*** current modification =git-gutter=
In addition to that, I like to see the lines that are being modified in the file
while it is being edited.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package git-gutter
    :delight
    :init (global-git-gutter-mode t))
#+END_SRC
*** show last commit modification =git-timemachine=
Easily see the changes made by previous commits.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package git-timemachine :delight)
#+END_SRC

* System interaction
** File explorer =dired=
Dired is a major mode for exploring file

dired-x is a minor that brings a lot to dired like hidding
- uninteresting file
- guessing which command to call...

  dired-du give the size of directory using du or lisp

  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package dired
      :delight ""
      :ensure nil
      :bind (:map dired-mode-map
                  ("RET" . dired-find-alternate-file)
                  ("^" . (lambda () (interactive) (find-alternate-file ".."))))
      :config
      (put 'dired-find-alternate-file 'disabled nil) ; disables warning
      :custom
      (dired-auto-revert-buffer t)
      (dired-dwim-target t)
      (dired-hide-details-hide-symlink-targets nil)
      (dired-omit-files "^\\...+$")
      (dired-omit-mode t)
      (dired-listing-switches "-alh")
      (dired-ls-F-marks-symlinks nil)
      (dired-recursive-copies 'always))

    (use-package dired-du
      :after dired) ; recursive size of files

    (use-package all-the-icons-dired ; icons
      :after dired
      :delight
      :config
      (all-the-icons-dired-mode))

    (use-package dired-x
      :ensure nil
      :after dired)
  #+END_SRC

  #+RESULTS:

** shell command =exec-path-from-shell=
update path of emacs to user path
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package exec-path-from-shell
    :config (exec-path-from-shell-initialize))
#+END_SRC
** TODO Environment variable
One of the next two is useless, need to determine wich one
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package keychain-environment
    :config (keychain-refresh-environment))
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-copy-env "SSH_AGENT_PID")
    (exec-path-from-shell-copy-env "SSH_AUTH_SOCK"))
#+end_SRC
** system notification =alert=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package alert
    :custom
    (alert-default-style 'libnotify))
#+END_SRC
* software interface
** TODO Password manager =pass=
#+begin_src emacs-lisp :tangle yes
  ;; (use-package auth-source-pass
  ;;   :ensure nil
  ;;   :config (auth-source-pass-enable))
  (use-package pass)
#+end_src

** TODO mpd interface =mpdel=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package mpdel
    :delight " "
    ;; :bind-keymap
    ;; ("C-c m" . mpdel-prefix-key)
    :ensure-system-package (mpd . "yay -S mpd"))
  (use-package ivy-mpdel
    :after mpdel)
#+END_SRC

* Organiser/calendar/linker/etc =org-mode=
Amazing mode of GNU Emacs.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org
    :ensure org-plus-contrib
    :delight " "
    :bind
    ("C-c l" . org-store-link)
    ("C-c a" . org-agenda)
    ("C-c c" . org-capture)
    (:map org-mode-map ("C-c o" . counsel-outline))
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages '((calc . t)))
    :custom
    (org-ellipsis " ⤵")
    (org-use-extra-keys t)
    (org-catch-invisible-edits 'show-and-error)
    (org-cycle-separator-lines 0)
    (org-refile-use-outline-path 'file)
    (org-outline-path-complete-in-steps nil)
    (org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
    :hook
    ((after-save . my/config-tangle)
     (org-edit-src-save  . delete-trailing-whitespace)
     (auto-save . org-save-all-org-buffers)))
#+END_SRC

** Table of content =toc-org=
Create and update automaticaly a table of contents.  =toc-org= will maintain a
table of contents at the first heading that has a =:TOC:= tag.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package toc-org
    :after org
    :hook (org-mode . toc-org-enable))
#+END_SRC

** Org indentation =org-indent=
For a cleaner inline mode.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-indent
    :delight
    :ensure nil
    :hook (org-mode . org-indent-mode))
#+END_SRC

** Bullets =org-bullets=
Prettier [[https://github.com/sabof/org-bullets][bullets]] in org-mode.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom (org-bullets-bullet-list '("●" "▲" "■" "✶" "◉" "○" "○")))
#+END_SRC
** org face
Foreground and the weight (bold) of each keywords.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-faces
    :ensure nil
    :after org
    :custom
    (org-todo-keyword-faces
     '(
       ("BOOK"       . (:foreground "red"    :weight bold))
       ("GO"         . (:foreground "orange" :weight bold))

       ("WENT"       . (:foreground "green"))
       ("CANCELED"   . (:foreground "grey" ))


       ("SOMEDAY"    . (:foreground "blue" ))
       ("TODO"       . (:foreground "red"    :weight bold))
       ("INPROGRESS" . (:foreground "orange" :weight bold))
       ("WAITING"    . (:foreground "yellow" :weight bold))

       ("DONE"       . (:foreground "green"))
       ("ABORDED"    . (:foreground "grey" ))


       ("IDEA"       . (:foreground "cyan"))
       ("FETCH"      . (:foreground "red" ))
       ("GIVE"       . (:foreground "orange"))

       ("FETCHED"    . (:foreground "green"))
       ("GIVEN"      . (:foreground "green"))

       ("USE"        . (:foreground "red"    :weight bold))
       ("CONSUMED"   . (:foreground "green"  :weight bold))
       ("LOST"       . (:foreground "grey"))
       )))
#+END_SRC

#+RESULTS:
** Org agenda
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-agenda
    :ensure nil
    :delight " "
    :after org
    :custom
    (org-directory "~/org")
    (org-agenda-files '("~/org/"))
    (org-agenda-dim-blocked-tasks t)
    (org-agenda-inhibit-startup t)
    (org-agenda-sticky t)
    (org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " " ""))
    (org-enforce-todo-dependencies t)
    (org-habit-graph-column 80)
    (org-habit-show-habits-only-for-today nil)
    (org-track-ordered-property-with-tag t)
    (org-agenda-todo-ignore-timestamp 'future)
    (org-agenda-todo-ignore-scheduled 'future)
    (org-agenda-todo-ignore-deadline  'far)
    (org-agenda-skip-scheduled-if-done t)
    (org-agenda-skip-scheduled-if-deadline-is-shown t)
    (org-agenda-skip-deadline-if-done t)
    (org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
    (org-agenda-skip-timestamp-if-deadline-is-shown t)
    (org-agenda-skip-timestamp-if-done t))
#+END_SRC
*** improved agenda view =org-super-agenda=
Org super agenda allows a more readible agenda by grouping the todo item
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-super-agenda
    :init (org-super-agenda-mode)
    :custom
    (org-agenda-custom-commands
     '(("o" "Overview of agenda and todo"
        ((agenda ""
                 (
                  (org-agenda-span '1)
                  (org-super-agenda-groups
                   '(
                     (:name "Agenda" :time-grid t)
                     (:name "Scheduled" :scheduled t)
                     (:name "Deadline"  :deadline t)
                     ))))
         (alltodo ""
                  ((org-super-agenda-groups
                    '(
                      (:name "Book"          :todo "BOOK")
                      (:name "Tasks"
                             :and
                             (:category "agenda"
                              :todo ("TODO" "INPROGRESS" "WAITING")
                              :not (:tag "config")
                              ))
                      (:name "Tezos"         :and (:category "project" :todo t))
                      (:name "Config"        :and (:tag "config"  :todo ("TODO" "INPROGRESS" "WAITING")))
                      (:name "Daily"         :and (:todo "FETCH" :tag "daily"))
                      (:name "Fetch"         :and (:todo "FETCH" :not (:tag "movie")))
                      (:name "Download"      :and (:todo "FETCH" :tag "movie"))
                      (:discard (:todo "IDEA"))
                      ))))
         )))))
#+END_SRC

#+RESULTS:

*** calendar view =calfw=

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package calfw :after org-agenda)

  (use-package calfw-org
    :after calfw
    :bind ("C-c z" . cfw:open-org-calendar)
    :custom
    (cfw:org-overwrite-default-keybinding t)
    :config
    ;; Another unicode chars
    (setq cfw:fchar-junction ?╬
          cfw:fchar-vertical-line ?║
          cfw:fchar-horizontal-line ?=
          cfw:fchar-left-junction ?╠
          cfw:fchar-right-junction ?╣
          cfw:fchar-top-junction ?╦
          cfw:fchar-top-left-corner ?╔
          cfw:fchar-top-right-corner ?╗))
#+END_SRC

*** TODO Caldav sync =org-caldav=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-caldav
    :init
    (defvar org-caldav-sync-timer nil
      "Timer that `org-caldav-push-timer' used to reschedule itself, or nil.")
    (defun my/org-caldav-sync-with-delay (secs)
      (when org-caldav-sync-timer (cancel-timer org-caldav-sync-timer))
      (setq org-caldav-sync-timer
            (run-with-idle-timer (* 1 secs) nil 'org-caldav-sync)))
    :custom
    (org-caldav-url "https://cloud.cowfa.xyz/remote.php/dav/calendars/baroud/")
    (org-caldav-backup-file "~/org/org-caldav-backup.org")
    (org-icalendar-alarm-time 10) ; set alarm 10 minutes before for calendar
    (org-caldav-show-sync-results nil)
    (org-icalendar-include-todo t)
    (org-caldav-delete-calendar-entries "always")
    :config
    (setq org-caldav-calendars
          '((:calendar-id "master"
                          :files ("~/org/master.org")
                          :inbox (file+headline "~/org/master.org" "sync"))
            (:calendar-id "projects"
                          :sync 'org->cal
                          :files ("~/org/projects.org")
                          :inbox (file+headline "~/org/projects.org" "sync"))
            (:calendar-id "claire"
                          :files ("~/org/claire.org")
                          :inbox (file+headline "~/org/claire.org" "sync"))
            (:calendar-id "wwwfacebookcom"
                          :sync 'cal->org
                          :inbox  "~/org/facebook.org")
            ))
    (setq org-icalendar-use-deadline
          '(event-if-todo event-if-not-todo todo-due))
    (setq org-icalendar-use-scheduled
          '(todo-start event-if-todo event-if-not-todo))
    :hook (
           (kill-emacs . org-caldav-sync)
           (after-save
            .
            (lambda ()
              (when (eq major-mode 'org-mode) (my/org-caldav-sync-with-delay 30))))))
#+END_SRC

#+RESULTS:
| (lambda nil (when (eq major-mode 'org-mode) (my/org-caldav-sync-with-delay 30))) | rmail-after-save-hook | (lambda nil (if (eq major-mode 'org-mode) (progn (my/org-caldav-sync-with-delay 30)))) | my/config-tangle | magit-after-save-refresh-buffers |

*** TODO notification =org-wild-notifier=
bug dans le code, ilfaut pas ce qu'il faut
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-wild-notifier
    :after org-agenda alert
    :custom
    (org-wild-notifier-keyword-whitelist nil)
    (org-wild-notifier--day-wide-events t)
    (org-wild-notifier-alert-time '(10 9 8 7 6 5 3 2 1))
    :init (org-wild-notifier-mode t))
#+END_SRC
** Org search =ivy-omni-org=

#+begin_src emacs-lisp :tangle yes
  ;; (use-package org-ql)

  ;; (use-package ivy-omni-org
  ;;   :after org ivy org-ql
  ;;   :custom
  ;;   (ivy-omni-org-content-types
  ;;    '(agenda-commands
  ;;      org-ql-views
  ;;      buffers
  ;;      files
  ;;      bookmarks))
  ;;   (ivy-omni-org-file-sources '(org-agenda-files)))
#+end_src

** Org link
[[gmap:test test][test test]]
#+begin_src emacs-lisp :tangle yes
  (setq
   org-link-abbrev-alist
   '(("google"    . "http://www.google.com/search?q=")
     ("ddg"       . "https://duckduckgo.com/?q=")
     ("gmaps"     . "http://maps.google.com/maps?q=%s")
     ("omap"      . "http://nominatim.openstreetmap.org/search?q=%s&polygon=1")))

#+end_src

** TODO Capture =org-capture=
=org-capture= templates saves you a lot of time when adding new entries. I use
it to quickly record tasks, ledger entries, notes and other semi-structured
information.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-capture
    :ensure nil
    :after org
    :preface

    (defvar my/with "%^{With |Sylvain|Claire|Adrien|Ada|Bernadat|P&C|A&D|B&J|Cryptium|Casa Rosada}")
    (defvar my/place "%^{Place |78 rue Hippolyte Kahn, Villeurbanne |17 rue Crozatier, Paris |12 ter rue Etienne Cardaire, Montpellier |12 rue Jules Ferry, Ivry-sur-seine |18 rue du square Carpeaux, Paris}")
    (defvar my/gare "|Lyon Part-dieu | Lyon Perrache | Paris Gare de Lyon |Montpellier St-Roch")
    (defvar my/stop "|Lyon Brasserie Georges|Montpellier ")
    (defvar my/from  (concat "%^{From " my/gare my/stop "}"))
    (defvar my/to    (concat "%^{To " my/gare my/stop "}"))
    (defvar my/agenda-template
      (concat
       "%^{Name} @ [[gmaps:%\\2][%\\2]] %^G
  :PROPERTIES:
  :Created: %U
  :Name:    %\\1
  :Place: [[gmaps:%\\2][%\\2]]
  :With:    " my/with "
  :END:
  %^{When}T
  "))

    (defvar my/org-tobook-template (concat "* BOOK " my/agenda-template))

    (defvar my/org-meeting-template (concat "* " my/agenda-template))

    (defvar my/org-trip-template (concat
                                  "* %\\1 -> %\\2
    :PROPERTIES:
    :Created: %U
    :From:   " my/from "
    :To:     "  my/to "
    :Type:    %^{Type}p
    :With:   " my/with "
    :END:
    %^{When}T
    "))

    (defvar my/org-roundtrip-template (concat
                                       "* %\\1 -> %\\2
    :PROPERTIES:
    :Created: %U
    :From:   " my/from "
    :To:     "  my/to "
    :Type:    %^{Type}p
    :With:   " my/with "
    :END:
    %^{When}T\n* %\\2 -> %\\1
    :PROPERTIES:
    :Created: %U
    :From:      %\\2
    :To:       %\\1
    :Type:    %^{Type}p
    :With:   " my/with "
    :END:
    %^{When}T
    "))

    (defvar my/org-voucher-template
      "* USE %^{Valor}
    DEADLINE:%^{Before}t
    :PROPERTIES:
    :Reduction:     %^{Reduction}
    :At:     %^{At|oui.sncf|ouibus|ouigo...}
    :END:
    %^{Cuando}t
    ")

    (defvar my/org-todo-template
      "* TODO %^{What} %(org-set-tags-command)
    :PROPERTIES:
    :Created:     %U
    :END:
    ")

    (defvar my/org-someday-template
      "* SOMEDAY %^{What} %^G
    :PROPERTIES:
    :Created:     %U
    :END:
    ")

    (defvar my/org-fetch-template
      "* FETCH %^{What}
    :PROPERTIES:
    :Created:     %U
    :END:
    ")

    (defvar my/org-gift-template
      "* IDEA %^{What}
    :PROPERTIES:
    :Created:     %U
    :For: %^{For}
    :When: %^{When}t
    :END:
    ")

    :custom
    (org-capture-templates
     `(("b" "Book" entry (file+headline "~/org/master.org" "Agenda"),
        my/org-tobook-template)
       ("m" "Meeting" entry (file+headline "~/org/master.org" "Agenda"),
        my/org-meeting-template)
       ("g" "Go")
       ("go" "On way trip" entry (file+headline "~/org/master.org" "Trip"),
        my/org-trip-template)
       ("gr" "Round trip" entry (file+headline "~/org/master.org" "Trip"),
        my/org-roundtrip-template)
       ("s" "stuff")
       ("sf" "fetch" entry (file+headline "~/org/master.org" "Stuff"),
        my/org-fetch-template)
       ("sg" "gift" entry (file+headline "~/org/master.org" "Stuff"),
        my/org-gift-template)
       ("t" "Tasks")
       ("tt" "todo" entry (file+headline "~/org/master.org" "Tasks"),
        my/org-todo-template)
       ("to" "One day" entry (file+headline "~/org/master.org" "Tasks"),
        my/org-someday-template)
       ("v" "voucher" entry (file+headline "~/org/master.org" "Voucher"),
        my/org-voucher-template)
       ("j" "Journal" entry (file+olp+datetree "~/org/master.org" "journal")
        "* %?\n:PROPERTIES:\n:CREATED:%U:\n:END:\n"))))
#+END_SRC
** org export

*** use pandoc to export =ox-pandoc=
#+begin_src emacs-lisp :tangle yes
  (use-package ox-pandoc
    :after org
    ;; :hook
    ;; (after-save
    ;;  .
    ;;  (lambda ()
    ;;    (when
    ;;        (and
    ;;         (string-equal (file-name-extension buffer-file-name) "org")
    ;;         (eq major-mode 'org-mode)
    ;;         (string-equal (file-name-directory (directory-file-name (expand-file-name buffer-file-name)))
    ;;                       (expand-file-name "~/notes/")))
    ;;      (org-pandoc-export-to-markdown_mmd))
       )
#+end_src

* read-only major-mode
** Mail
*** mu =mu4e=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package smtpmail :ensure nil)
  (use-package mu4e
    :after ivy smtpmail
    :ensure nil
    :bind ("C-c m" . mu4e)
    :ensure-system-package mu
    :custom
    (mu4e-maildir "~/Maildir")
    (mu4e-use-fancy-chars nil)
    (mu4e-view-show-addresses t)
    (mu4e-view-show-images t)
    (message-send-mail-function 'smtpmail-send-it)
    (mu4e-view-auto-mark-as-read  nil)
    ;; (user-mail-address "sylvain.ribstein@gmail.com")
    ;; (smtpmail-smtp-user "sylvain.ribstein")
    ;; (smtpmail-default-smtp-server "smtp.gmail.com" )
    ;; (smtpmail-smtp-server "smtp.gmail.com" )
    ;; (smtpmail-local-domain "gmail.com")
    ;; (user-full-name "Sylvain Ribstein" )
    ;; (mu4e-trash-folder "/Gmail/[Gmail]/Trash" )
    ;; (mu4e-refile-folder "/Gmail/[Gmail]/Archive" )
    ;; (mu4e-drafts-folder "/Gmail/[Gmail]/Drafts" )
    ;; (mu4e-sent-folder "/Gmail/[Gmail]/Sent Mail" )
    (mu4e-compose-signature
     (concat
      "Sylvain Ribstein\n"
      "sylvain.ribstein@gmail.com\n"
      "00336 66 26 05 28\n"))
    (smtpmail-stream-type 'starttls)
    (smtpmail-smtp-service 587)
    (mu4e-get-mail-command "offlineimap -o -q")
    (message-kill-buffer-on-exit t)
    (mu4e-completing-read-function 'ivy-completing-read)
    (mu4e-headers-fields
     '((:human-date . 12)
       (:maildir . 22)
       (:flags . 6)
       (:from-or-to . 22)
       (:mailing-list . 10)
       (:thread-subject)
       ))
    (mu4e-confirm-quit nil)
    :config
    (setq
     mu4e-contexts
     `(,(make-mu4e-context
         :name "Gmail"
         :enter-func (lambda () (mu4e-message "Entering Gmail context"))
         :leave-func (lambda () (mu4e-message "Leaving Gmail context"))
         :match-func
         (lambda (msg)
           (when msg
             (string-match-p "^/Gmail" (mu4e-message-field msg :maildir))))
         :vars
         '( ( user-mail-address . "sylvain.ribstein@gmail.com"  )
            (smtpmail-smtp-user . "sylvain.ribstein")
            ( smtpmail-smtp-server . "smtp.gmail.com" )
            ( user-full-name . "Sylvain Ribstein" )
            ( mu4e-trash-folder . "/Gmail/[Gmail]/Trash" )
            ( mu4e-refile-folder . "/Gmail/[Gmail]/Archive" )
            ( mu4e-drafts-folder . "/Gmail/[Gmail]/Drafts" )
            (mu4e-sent-folder . "/Gmail/[Gmail]/Sent Mail" )
            ( mu4e-compose-signature
              . (concat
                 "Sylvain Ribstein\n"
                 "sylvain.ribstein@gmail.com\n"
                 "00336 66 26 05 28\n"))))
       ;; ,(make-mu4e-context
       ;;   :name "Ribstein"
       ;;   :enter-func (lambda () (mu4e-message "Entering the Ribstein context"))
       ;;   :leave-func (lambda () (mu4e-message "Leaving Ribstein context"))
       ;;   ;; we match based on the maildir of the message
       ;;   :match-func
       ;;   (lambda (msg)
       ;;     (when msg
       ;;       (string-match-p "^/Ribstein" (mu4e-message-field msg :maildir))))
       ;;       :vars
       ;;       '( ( user-mail-address . "sylvain@ribstein.club" )
       ;;      ( smtpmail-smtp-user . "sylvain@ribstein.club" )
       ;;      ( smtpmail-smtp-server . "mail.ribstein.club" )
       ;;      ( user-full-name . "Sylvain Ribstein" )
       ;;      ( mu4e-trash-folder . "/Ribstein/Trash" )
       ;;      ( mu4e-refile-folder . "/Ribstein/Archive" )
       ;;      ( mu4e-drafts-folder . "/Ribstein/Drafts" )
       ;;      (mu4e-sent-folder . "/Ribstein/Sent" )
       ;;      ( mu4e-compose-signature
       ;;        . (concat
       ;;           "Sylvain Ribstein\n"
       ;;           "sylvain@ribstein.club\n"
       ;;           "00336 66 26 05 28\n"))))
       ,(make-mu4e-context
         :name "Cowfa"
         :enter-func (lambda () (mu4e-message "Entering the Cowfa context"))
         :leave-func (lambda () (mu4e-message "Leaving Cowfa context"))
         ;; we match based on the maildir of the message
         :match-func
         (lambda (msg)
           (when msg
             (string-match-p "^/Cowfa" (mu4e-message-field msg :maildir))))
         :vars
         '( ( user-mail-address . "baroud@cowfa.xyz" )
            ( smtpmail-smtp-user . "baroud@cowfa.xyz" )
            ( smtpmail-smtp-server . "mail.cowfa.xyz" )
            ( user-full-name . "Baroud" )
            ( mu4e-trash-folder . "/Cowfa/Trash" )
            ( mu4e-refile-folder . "/Cowfa/Archive" )
            ( mu4e-drafts-folder . "/Cowfa/Drafts" )
            (mu4e-sent-folder . "/Cowfa/Sent" )
            ( mu4e-compose-signature
              . (concat
                 "Cowfa\n"
                 "baroud@cowfa.xyz\n"
                 "00336 66 26 05 28\n")))))))

  (use-package mu4e-alert
    :after mu4e
    :hook ((after-init . mu4e-alert-enable-mode-line-display)
           (after-init . mu4e-alert-enable-notifications))
    :config (mu4e-alert-set-default-style 'libnotify))

  (use-package mu4e-maildirs-extension
    :after mu4e
    :init (mu4e-maildirs-extension))

  (use-package mu4e-contrib
    :after mu4e)

  (setq shr-color-visible-luminance-min 80)

  ;; needs to be compiled with gtk stuff
  ;; (use-package mu4e-views
  ;;   :after mu4e
  ;;   :bind
  ;;   (:map mu4e-headers-mode-map
  ;;         ("v" . mu4e-views-mu4e-select-view-msg-method) ;; select viewing method
  ;;         ("M-n" . mu4e-views-cursor-msg-view-window-down) ;; from headers window scroll the email view
  ;;         ("M-p" . mu4e-views-cursor-msg-view-window-up) ;; from headers window scroll the email view
  ;;         )
  ;;   :config
  ;;   (setq mu4e-views-completion-method 'ivy) ;; use ivy for completion
  ;;   (setq mu4e-views-default-view-method "html") ;; make xwidgets default
  ;;   (mu4e-views-mu4e-use-view-msg-method "html") ;; select the default
  ;;   (setq mu4e-views-next-previous-message-behaviour 'stick-to-current-window)) ;; when pressing n and p stay in the current window)
#+END_SRC

#+RESULTS:
: 80

** compilation
add ansi color to the compilation buffer
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ansi-color
    :config
    (defun my/colorize-compilation-buffer ()
      (when (eq major-mode 'compilation-mode)
        (ansi-color-apply-on-region compilation-filter-start (point-max))))
    :hook
    (compilation-filter . my/colorize-compilation-buffer))
#+END_SRC

** Dashboard =dashboard=
Always good to have a dashboard.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dashboard
    :after projectile
    :delight ""
    :custom
    (dashboard-startup-banner 'official)
    (dashboard-center-content t)
    :config
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    (dashboard-setup-startup-hook)
    (setq dashboard-items
          '((agenda . 10)
            (projects . 3)
            (recents  . 5))))
#+END_SRC

** TODO Web browser =xwwp-follow-link=
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package xwwp-follow-link
  ;; :load-path "~/.emacs.d/xwwp-follow-link"
  ;; :custom
  ;; (xwwp-follow-link-completion-system 'ivy)
  ;; :bind (:map xwidget-webkit-mode-map
  ;;               ("v" . xwwp-follow-link)))
#+END_SRC

* to order
** diff =diffview=
This package allow to view diff side by side
#+begin_src  emacs-lisp :tangle yes
  (use-package diffview)
#+end_src

* TO-DO
** TODO contact
*** dav directory =vdirel=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package vdirel
    :custom
    (vdirel-repositories
     '("~/.contacts/contacts" "~/calendar/master" "~/calendar/claire")))
#+END_SRC
*** TODO emacs format =bbdb=
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package bbdb
  ;; :hook gnus-startup
  ;; :custom
  ;; (bbdb-file "~/.contacts/bbdb")
  ;; (bbdb-no-duplicate t)
  ;; :init
  ;; (bbdb-initialize 'gnus 'message))
  ;; (use-package bbdb-vcard
  ;; )
#+END_SRC
*** TODO new bbdb =ebdb=
This one will at some point incorporate a carddav sync
** DONE make qutebrowser default browser
:PROPERTIES:
:Created:  [2020-04-15 mer. 15:06]
:END:
* not used anymore
** DONE file explorer =ranger=
Miller column within dired-mode

I'm a bit bother by that package because it use the vi keybinding not default
emacs one... I could rewrite all keybinding. Also it does not seems to work well
with directory filed with large file.
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package ranger
  ;;   :config
  ;;   (ranger-override-dired-mode t)
  ;;   :custom
  ;;   (ranger-cleanup-eagerly t)
  ;;   (ranger-dont-show-binary t)
  ;;   (ranger-max-preview-size 10))
#+END_SRC
** DONE Gnus =gnus=
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package gnus
  ;; :bind (("C-c m" . gnus)
  ;; :map gnus-group-mode-map
  ;;    ("C-c C-f" . gnus-summary-mail-forward))
  ;; :delight "")

  ;; (use-package w3m
  ;;  :delight ""
  ;;  :after gnus)

  ;;  (use-package all-the-icons-gnus
  ;;  :after gnus all-the-icons
  ;;  :config
  ;;  (all-the-icons-gnus-setup))
#+END_SRC
** DONE Journal =org-journal=
replaced by my own org-capture
I can delete this setting
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package org-journal
  ;; :after org
  ;; :delight ""
  ;; :custom
  ;; (org-journal-dir "~/org/journal")
  ;; :bind
  ;; ("C-c n j" . org-journal-new-entry)
  ;; )
#+END_SRC

#+RESULTS:
** DONE opam =opam-update-env=
not work as intended, but not needed anymore as I've pute opam (update... into my .profile
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package opam-update-env
  ;; :after tuareg)
#+END_SRC
