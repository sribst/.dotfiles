#+TITLE: Gnu Emacs Configuration
#+AUTHOR: Sylvain Ribstein
#+CATEGORY: config

* Table of content :TOC_4:
- [[#global-configuration][Global configuration]]
  - [[#packages][Packages]]
    - [[#sources][Sources]]
    - [[#configuration-use-package][Configuration =use-package=]]
    - [[#update-auto-package-update][update =auto-package-update=]]
    - [[#menu-paradox][menu =paradox=]]
  - [[#configuration][configuration]]
    - [[#global-variable][global variable]]
    - [[#customization][Customization]]
    - [[#update][update]]
  - [[#auto-backup-file][auto backup file]]
  - [[#auto-save-mode][auto-save-mode]]
  - [[#apparence][apparence]]
    - [[#turn-off-mouse-interface][Turn off mouse interface]]
    - [[#theme-constant-theme][Theme =constant-theme=]]
    - [[#theme-xresources-theme][Theme =xresources-theme=]]
    - [[#font][font]]
      - [[#icons-all-the-icons][icons =all-the-icons=]]
- [[#mini-buffer][Mini-buffer]]
  - [[#parameter][parameter]]
  - [[#completion-engine-ivy][completion engine =ivy=]]
  - [[#save-command-history-save-hist][save command history =save-hist=]]
  - [[#m-x-on-popup-ivy-posframe][M-x on popup =ivy-posframe=]]
  - [[#search-in-current-buffer-swiper][search in current buffer =swiper=]]
  - [[#search-somewhere-else-m-xdiredetc-smexcounsel][search somewhere else "M-x/dired/etc" =smex,counsel=]]
  - [[#improved-text-search-ripgrep][improved text search =ripgrep=]]
  - [[#modify-grep-result-wgrep][modify grep result =wgrep=]]
  - [[#open-with-sudo-auto-sudoedit][open with sudo =auto-sudoedit=]]
  - [[#hintsinformation-of-current-mark-eldoc][hints/information of current mark =eldoc=]]
  - [[#keystroke-helper-which-key][keystroke helper =which-key=]]
- [[#mode-line][Mode-line]]
  - [[#parameter-1][Parameter]]
  - [[#mode-icons-delight][Mode icons =delight=]]
  - [[#modified-modeline-nano-modeline][modified modeline =nano-modeline=]]
- [[#interface-interaction][Interface interaction]]
  - [[#buffer][Buffer]]
    - [[#parameter-2][parameter]]
    - [[#kill-current-buffer-without-asking][kill current buffer without asking]]
    - [[#dimme-non-focus-buffer-dimmer][dimme non focus buffer =dimmer=]]
  - [[#window][Window]]
    - [[#parameter-3][parameter]]
    - [[#auto-balance-window-balanced-windows][Auto balance window =balanced-windows=]]
    - [[#switch-window-ace-window][switch window =ace-window=]]
    - [[#window-configuration-winner-mode][window configuration =winner-mode=]]
    - [[#toggle-windows-split][Toggle windows split]]
    - [[#scrolling][Scrolling]]
    - [[#cursor-setting-beacon-hl][cursor setting =beacon= =hl=]]
- [[#edition][Edition]]
  - [[#parameter-4][Parameter]]
  - [[#replace-string-visual-replace][replace string =visual-replace=]]
  - [[#delete-all-space-in-front-smart-hungry-delete][delete all space in front =smart-hungry-delete=]]
  - [[#move-text-move-text][Move text =move-text=]]
  - [[#whitespace-whitespace][Whitespace =whitespace=]]
  - [[#auto-completion-corfu][Auto-Completion =corfu=]]
  - [[#snippet-yasnippet][snippet =yasnippet=]]
  - [[#edit-all-occurence-iedit][Edit all occurence =iedit=]]
  - [[#decoration][Decoration]]
    - [[#color-parenthesis-rainbow-delimiters][Color parenthesis =rainbow-delimiters=]]
  - [[#copy-line-when-no-active-region][copy line when no active region]]
  - [[#specific][Specific]]
    - [[#spell-checking-flyspell][spell checking =flyspell=]]
    - [[#syntax-checking-flycheck][syntax checking =flycheck=]]
    - [[#language-server-lsp-mode][Language server =lsp-mode=]]
    - [[#programming-language][Programming language]]
      - [[#semantic-highlighting-color-identifiers-mode][semantic highlighting =color-identifiers-mode=]]
      - [[#shell-script-shfmt][Shell script =shfmt=]]
      - [[#javascript-js2-mode-tide-pretier-js][Javascript =js2-mode, tide, pretier-js=]]
      - [[#rust-rustic-mode][Rust =rustic-mode=]]
      - [[#docker-dockerfile-mode][Docker =dockerfile-mode=]]
      - [[#terraform-dockerfile-mode][terraform =dockerfile-mode=]]
      - [[#ocaml][OCaml]]
      - [[#sql-sql-indent][sql =sql-indent=]]
    - [[#description-language][Description language]]
      - [[#csv-csv-mode][csv =csv-mode=]]
      - [[#json][=Json=]]
- [[#project][Project]]
  - [[#interaction-projectile][interaction =projectile=]]
  - [[#git][Git]]
    - [[#git-interaction-magit][Git interaction =magit=]]
    - [[#current-modification-git-gutter][current modification =git-gutter=]]
    - [[#show-last-commit-modification-git-timemachine][show last commit modification =git-timemachine=]]
- [[#system-interaction][System interaction]]
  - [[#file-explorer-dired][File explorer =dired=]]
  - [[#environment-variable][Environment variable]]
- [[#organisercalendarlinkeretc-org-mode][Organiser/calendar/linker/etc =org-mode=]]
  - [[#table-of-content-toc-org][Table of content =toc-org=]]
  - [[#org-indentation-org-indent][Org indentation =org-indent=]]
  - [[#bullets-org-bullets][Bullets =org-bullets=]]
  - [[#org-face][org face]]
  - [[#org-agenda][Org agenda]]
    - [[#improved-agenda-view-org-super-agenda][improved agenda view =org-super-agenda=]]
    - [[#calendar-view-calfw][calendar view =calfw=]]
    - [[#caldav-sync-org-caldav][Caldav sync =org-caldav=]]
    - [[#notification-org-wild-notifier][notification =org-wild-notifier=]]
  - [[#org-link][Org link]]
  - [[#clock-org-clock][clock =org-clock=]]
  - [[#capture-org-capture][Capture =org-capture=]]
- [[#read-only-major-mode][read-only major-mode]]
  - [[#compilation][compilation]]
- [[#update-my-conf-using-config][update my conf using config]]

* Global configuration
Here is configuration that is used across all emacs mode
** Packages
*** Sources
The sources of package.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq package-archives
        '(("gnu" . "http://elpa.gnu.org/packages/") ;; Official
          ("melpa" . "http://melpa.org/packages/")  ;; Unofficial but use everywhere
          ("org" . "http://orgmode.org/elpa/")      ;; Org-mode package source
          ))
#+END_SRC

*** Configuration =use-package=
Use package allow to install and configure package in a fancy way.
It permit also to defer loading of package.
src: https://github.com/jwiegley/use-package

#+BEGIN_SRC emacs-lisp :tangle yes
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (use-package use-package-ensure-system-package
    :ensure t
    :custom
    (use-package-always-ensure t)) ; Avoid the :ensure keyword for each package
  (use-package use-package-ensure-system-package)
#+END_SRC
*** update =auto-package-update=
Auto-update all packages regularly
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package auto-package-update
    :defer t
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-delete-old-versions  t)
    (auto-package-update-hide-results         t)
    (auto-package-update-prompt-before-update ))

  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame) (auto-package-update-maybe)))
    (progn (auto-package-update-maybe)))
#+END_SRC

#+RESULTS:
| (lambda (frame) (auto-package-update-maybe)) | (lambda (frame) (select-frame frame) (if (window-system frame) (if my/theme-window-loaded nil (if my/theme-terminal-loaded (enable-theme my/theme) (progn (load-theme my/theme t))) (setq my/theme-window-loaded t)) (if my/theme-terminal-loaded nil (if my/theme-window-loaded (enable-theme my/theme) (progn (load-theme my/theme t))) (setq my/theme-terminal-loaded t)))) | x-dnd-init-frame |

*** menu =paradox=
Paradox is a better mode to look after package. I need to fix the access to
github.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package paradox
    :custom
    (paradox-column-width-package 27)
    (paradox-column-width-version 13)
    (paradox-execute-asynchronously t)
    (paradox-hide-wiki-packages t)
    :config
     (paradox-enable)
    (remove-hook 'paradox-after-execute-functions #'paradox--report-buffer-print))
#+END_SRC

** configuration
*** global variable
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq-default
   inhibit-startup-screen t ; Disable start-up screen
   initial-scratch-message "" ; Empty the initial *scratch* buffer
   initial-major-mode 'text-mode ; major mode of  *scratch* buffer
   ad-redefinition-action 'accept ; Silence warnings for redefinition
   fill-column 70 ; Set width for automatic line breaks
   help-window-select t ; Focus new help windows when opened
   load-prefer-newer t ; Prefers the newest version of a file
   scroll-conservatively most-positive-fixnum ; Always scroll by one line
   set-default-coding-systems 'utf-8) ; Default to utf-8 encoding
#+END_SRC

*** Customization
To avoid overloading the GNU Emacs custormization =init.el= file made by the
user with the UI, I add the generated code in a separate file.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq-default custom-file (expand-file-name "~/.emacs.d/custom.el"))
  (when (file-exists-p custom-file) (load custom-file t))
#+END_SRC

*** update
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package async)
  (defvar *config-file* (expand-file-name "config.org" user-emacs-directory)
    "The configuration file.")

  (defvar *config-last-change* (nth 5 (file-attributes *config-file*))
    "Last modification time of the configuration file.")

  (defvar *show-async-tangle-results* nil "Keeps *emacs* async buffers around for later inspection.")

  (defun my/config-updated ()
    "Checks if the configuration file has been updated since the last time."
    (time-less-p *config-last-change*
                 (nth 5 (file-attributes *config-file*))))

  (defun my/async-babel-tangle (org-file)
    "Tangles the org file asynchronously."
    (let ((init-tangle-start-time (current-time))
          (file (buffer-file-name))
          (async-quiet-switch "-q"))
      (async-start
       `(lambda ()
          (require 'org)
          (org-babel-tangle-file ,org-file))
       (unless *show-async-tangle-results*
         `(lambda (result)
            (if result
                (message "SUCCESS: %s successfully tangled (%.2fs)."
                         ,org-file
                         (float-time (time-subtract (current-time)
                                                    ',init-tangle-start-time)))
              (message "ERROR: %s as tangle failed." ,org-file)))))))

  (defun my/config-tangle ()
    "Tangles the org file asynchronously."
    (when (my/config-updated)
      (setq *config-last-change*
            (nth 5 (file-attributes *config-file*)))
      (my/async-babel-tangle *config-file*)))

  (defun my/reload-config ()
    "reload config of emacs on-the-fly"
    (interactive)
    (load-file (expand-file-name "config.el" user-emacs-directory)))

  (defun my/update-and-reload-config ()
    "Force the update of the configuration."
    (interactive)
    (org-babel-load-file (expand-file-name "config.org" user-emacs-directory)))
#+END_SRC

** auto backup file
It is important to have a stable backup environment.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package files
    :ensure nil
    :custom
    (backup-directory-alist `(("." . "~/.emacs.d/backup")))
    (delete-old-versions t)
    (vc-make-backup-files t)
    (version-control t))
#+END_SRC

** auto-save-mode
#+begin_src emacs-lisp :tangle yes
  (auto-save-visited-mode t)
#+END_SRC


** apparence
*** Turn off mouse interface
Since I never use the mouse with GNU Emacs, I prefer not to use certain
graphical elements as seen as the menu bar, toolbar, scrollbar and tooltip that
I find invasive.
#+BEGIN_SRC emacs-lisp :tangle yes
  (menu-bar-mode -1)      ; Disable the menu bar
  (scroll-bar-mode -1)    ; Disable the scroll bar
  (tool-bar-mode -1)      ; Disable the tool bar
  (tooltip-mode -1)       ; Disable the tooltips
#+END_SRC

*** Theme =constant-theme=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package constant-theme)
  ;; (load-theme 'constant t)
#+END_SRC

#+RESULTS:

*** Theme =xresources-theme=
xresources-theme that respect Xressources
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package xresources-theme)

  (defvar my/theme-window-loaded nil)
  (defvar my/theme-terminal-loaded nil)
  (defvar my/theme 'xresources)
  (if (daemonp)
      (add-hook
       'after-make-frame-functions
       (lambda (frame)
         (select-frame frame)
         (if (window-system frame)
             (unless my/theme-window-loaded
               (if my/theme-terminal-loaded
                   (enable-theme my/theme)
                 (progn
                   (load-theme my/theme t)
                   ))
               (setq my/theme-window-loaded t))
           (unless my/theme-terminal-loaded
             (if my/theme-window-loaded
                 (enable-theme my/theme)
               (progn
                 (load-theme my/theme t)
                 ))
             (setq my/theme-terminal-loaded t)))))
    (progn
      (load-theme my/theme t)
      (if (display-graphic-p)
          (setq my/theme-window-loaded t)
        (setq my/theme-terminal-loaded t))))

#+END_SRC

*** font
**** icons =all-the-icons=
One need to run M-x all-the-icons-install-fonts after all-the-icons
being installed
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package all-the-icons
    :if (display-graphic-p)
    )
#+END_SRC

* Mini-buffer
** parameter
#+BEGIN_SRC emacs-lisp :tangle yes
  (fset 'yes-or-no-p 'y-or-n-p) ; Replace yes/no prompts with y/n
#+END_SRC

** completion engine =ivy=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ivy
    :demand ;force-loading
    :delight
    :bind ("C-x B" . ivy-switch-buffer-other-window)
    :custom
    (ivy-count-format "(%d/%d) ")
    (ivy-use-virtual-buffers t)
    (ivy-extra-directories nil)
    (ivy-magic-slash-non-match-action 'ivy-magic-slash-non-match-create)
    :config (ivy-mode))

  (use-package ivy-rich
    :after ivy
    :init (setq ivy-rich-parse-remote-file-path t)
    :config (ivy-rich-mode 1))

  (use-package all-the-icons-ivy
    :after ivy
    :config (all-the-icons-ivy-setup))
#+END_SRC

** save command history =save-hist=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package savehist
    :config (savehist-mode 1))
  #+END_SRC

** M-x on popup =ivy-posframe=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ivy-posframe
    :config
    ;; Different command can use different display function.
    (setq ivy-posframe-height-alist '((swiper . 20)
                                      (t      . 40)))
    (setq ivy-posframe-display-functions-alist
          '((swiper          . ivy-display-function-fallback)
            (counsel-M-x     . ivy-posframe-display-at-window-bottom-left)
            (t               . ivy-posframe-display)))
    :init
    (ivy-posframe-mode 1)
    )
#+END_SRC

** search in current buffer =swiper=
#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package swiper
      :after (ivy xresources-theme)
      :config
      (custom-set-faces
       `(swiper-line-face               ((t (:background ,(xresources-theme-color "color12")))))
       `(swiper-match-face-1            ((t (:background ,(x-get-resource "color9"  "") :weight bold))))
       `(swiper-match-face-2            ((t (:background ,(xresources-theme-color "color10") :weight bold))))
       `(swiper-match-face-3            ((t (:background ,(xresources-theme-color "color11") :weight bold))))
       `(swiper-match-face-4            ((t (:background ,(xresources-theme-color "color13") :weight bold)))))
      :bind ("C-s" . swiper))
#+END_SRC

** search somewhere else "M-x/dired/etc" =smex,counsel=
smex order last command/mode by most used and recent

counsel is an intergrate launcher for exec alternative ("M-x")
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package smex)
  (use-package counsel
    :after (ivy smex)
     :init (counsel-mode 1))
#+END_SRC

** improved text search =ripgrep=
ripgrep is an alternative of grep that is faster and respect project (.gitignore, ...)
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ripgrep
     :ensure-system-package (rg . "yay -S ripgrep"))
#+END_SRC

** modify grep result =wgrep=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package wgrep :disabled)
#+END_SRC

** open with sudo =auto-sudoedit=
automatically open with tramp when needed
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package tramp
    :ensure nil
    :custom (tramp-default-method "sshx"))
  (use-package auto-sudoedit
    :init (auto-sudoedit-mode t))
  (use-package counsel-tramp
     :after (tramp counsel))
#+END_SRC

** hints/information of current mark =eldoc=
Provides minibuffer hints when working with Emacs Lisp.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package eldoc
    :hook ((prog-mode org-mode) . eldoc-mode))
#+END_SRC

** keystroke helper =which-key=
show all possible completion after a keystroke.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package which-key
    :config (which-key-mode))
#+END_SRC

* Mode-line
** Parameter
#+BEGIN_SRC emacs-lisp :tangle yes
  (column-number-mode 1) ; Show the column number
#+END_SRC

** Mode icons =delight=
delight is a way of showing wich major/minor is currently open. It's
show which mode on the main bar.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package delight)
#+END_SRC

** modified modeline =nano-modeline=
#+begin_src emacs-lisp :tangle yes
  (use-package mood-line
    ;; Enable mood-line
    :config
    (mood-line-mode)
    ;; Use pretty Fira Code-compatible glyphs
    :custom
    (mood-line-glyph-alist mood-line-glyphs-fira-code))
#+end_src

* Interface interaction
** Buffer
*** parameter
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq view-read-only t ) ; Always open read-only buffers in view-mode
  (setq cursor-in-non-selected-windows t) ; Hide the cursor in inactive windows
#+END_SRC
*** kill current buffer without asking
Don't ask before killing a buffer. I know what I'm doing.
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key [remap kill-buffer] #'kill-current-buffer)
#+END_SRC

*** dimme non focus buffer =dimmer=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dimmer
    :config
    (dimmer-configure-which-key)
    (dimmer-configure-magit)
    (dimmer-configure-org)
    :custom
    (dimmer-adjustment-mode :foreground)
    (dimmer-fraction 0.35)
    :init (dimmer-mode t))
#+END_SRC

** Window
*** parameter
split-width-threshold nil does not work for me
need to find correct config -> use toggle-windows-split atm
#+BEGIN_SRC emacs-lisp :tangle yes
(setq split-height-threshold 180)
(setq split-width-threshold 90)
#+END_SRC

*** Auto balance window =balanced-windows=
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package balanced-windows
  :config
  (balanced-windows-mode))
 #+END_SRC


*** switch window =ace-window=
ace window allow to simply switch when only 2 window or to choose
which window with key when multiple buff
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ace-window
    :bind
    (("C-x o" . ace-window)
     ("M-o" . ace-window))
    :init
    (setq aw-keys '(?& ?é ?\" ?' ?\( ?- ?è ?_))
    (setq aw-scope 'frame))
#+END_SRC

*** window configuration =winner-mode=
Allow to undo and redo buffer configuration to easily open one buffer than
switch back to multiple open buffer.
- "C . b"  -> undo
- "C . f" -> redo
  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package winner
      :ensure nil
      :bind (("C-c b" . winner-undo)
             ("C-c f" . winner-redo))
      :init (winner-mode))
  #+END_SRC

*** Toggle windows split
switch layout when two buffers are open
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun toggle-window-split ()
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
               (next-win-buffer (window-buffer (next-window)))
               (this-win-edges (window-edges (selected-window)))
               (next-win-edges (window-edges (next-window)))
               (this-win-2nd (not (and (<= (car this-win-edges)
                                           (car next-win-edges))
                                       (<= (cadr this-win-edges)
                                           (cadr next-win-edges)))))
               (splitter
                (if (= (car this-win-edges)
                       (car (window-edges (next-window))))
                    'split-window-horizontally
                  'split-window-vertically)))
          (delete-other-windows)
          (let ((first-win (selected-window)))
            (funcall splitter)
            (if this-win-2nd (other-window 1))
            (set-window-buffer (selected-window) this-win-buffer)
            (set-window-buffer (next-window) next-win-buffer)
            (select-window first-win)
            (if this-win-2nd (other-window 1))))))
  (define-key ctl-x-4-map "t" 'toggle-window-split)
#+END_SRC

*** Scrolling
Start scrolling when nm left of line < 5 top and bottom
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq scroll-margin 5)
#+END_SRC

*** cursor setting =beacon= =hl=
=hl= Highlight current lign with diff background color
=beacon= beam-color whenever cursor change

#+begin_src emacs-lisp :tangle yes
  (global-hl-line-mode 1) ; Hightlight current line

  (use-package beacon
    :delight
    :when (window-system)
    :custom
    (beacon-color (xresources-theme-color "color13"))
    (beacon-blink-when-window-scrolls t)
    (beacon-blink-when-point-moves-horizontally 10)
    (beacon-push-mark 35)
    :config (beacon-mode 1))
#+end_src

#+RESULTS:
: t

* Edition
** Parameter
basic default value to enable
#+BEGIN_SRC emacs-lisp :tangle yes
  (put 'upcase-region   'disabled nil) ; Allow C-x C-u
  (put 'downcase-region 'disabled nil) ; Allow C-x C-l
  (show-paren-mode 1) ; Show the parenthesis
  (transient-mark-mode t) ; same mark mouse or keyboard
  (setq blink-cursor-mode nil) ; the cursor wont blink
  (setq highlight-nonselected-windows t)
  (setq-default indent-tabs-mode nil) ; use space instead of tab to indent
  (delete-selection-mode t) ; when writing into marked region delete it
  (setq tab-width 4) ; Set width for tabs

  (use-package mouse
    :ensure nil
    :bind ("C-c y" . yank-primary-selection)
    :init
    (defun yank-primary-selection ()
      (interactive)
      (insert (gui-get-primary-selection))))
#+END_SRC

** replace string =visual-replace=
visuel-regexp show in the buffer the replaced
#+begin_src emacs-lisp :tangle yes
  (use-package visual-regexp
    :bind
    ("C-c s r" . vr/replace)
    ("C-c s q" . vr/query-replace))
#+end_src

** delete all space in front =smart-hungry-delete=
#+begin_src emacs-lisp :tangle yes
  (use-package smart-hungry-delete
    :bind (([remap backward-delete-char-untabify] . smart-hungry-delete-backward-char)
           ([remap delete-backward-char] . smart-hungry-delete-backward-char)
           ([remap delete-char] . smart-hungry-delete-forward-char))
    :init (smart-hungry-delete-add-default-hooks))
#+end_src

** Move text =move-text=
Moves the current line (or if marked, the current region's, whole lines).
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package move-text
    :bind
    (("M-p" . move-text-up)
     ("M-n" . move-text-down)))
#+END_SRC

** Whitespace =whitespace=
# to remove the hook eval
# (remove-hook 'before-save-hook 'delete-trailing-whitespace nil)

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package whitespace
    :delight
    :hook
    (((prog-mode text-mode org-mode) . whitespace-mode)
     (before-save . delete-trailing-whitespace))
    :custom
    (whitespace-style
     '(face trailing tabs newline empty tab-mark newline-mark))
    (whitespace-display-mappings
     '((space-mark 32 [183] [46])
       (newline-mark 10 [182 10])
       (tab-mark 9 [9655 9] [92 9]))))
#+END_SRC

** Auto-Completion =corfu=

=corfu= provides auto-completion at point and to displays a small
pop-in containing the candidates.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))

  (use-package corfu
    ;; Optional customizations
    ;;   :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  ;;   (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin
    :config
    (corfu-popupinfo-mode t)
    :init (global-corfu-mode))
#+END_SRC

** snippet =yasnippet=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yasnippet
    :custom
    (yas-verbosity 1) ; No need to be so verbose
    (yas-wrap-around-region t)
    :config
    (yas-reload-all)
    (yas-global-mode)  )

  (use-package yasnippet-snippets         ; Collection of snippets
    :requires yasnippet)
#+END_SRC

** Edit all occurence =iedit=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package iedit
    :bind ("C-c e" . iedit-mode))
#+END_SRC

** Decoration
*** Color parenthesis =rainbow-delimiters=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :delight
    :hook ((prog-mode org-mode) . rainbow-delimiters-mode))
#+END_SRC

** copy line when no active region

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package whole-line-or-region
    :delight
    :init
    (whole-line-or-region-global-mode))
#+END_SRC

#+RESULTS:

** Specific
*** spell checking =flyspell=
spell checking on the fly
#+begin_src emacs-lisp :tangle yes
  (use-package flyspell
    :delight
    :hook
    ((text-mode . flyspell-mode)
     (prog-mode . flyspell-prog-mode)))

  (use-package flyspell-correct
    :after flyspell
    :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))

  (use-package flyspell-correct-ivy
    :after flyspell-correct)
#+end_src

*** syntax checking =flycheck=
spell checking on the fly
#+begin_src emacs-lisp :tangle yes
  (use-package flycheck
    :delight
    :commands flycheck-mode
    :init (global-flycheck-mode))

  (use-package flycheck-color-mode-line
    :delight
    :after flycheck
    :hook
    (flycheck-mode . flycheck-color-mode-line-mode))

  (use-package flycheck-pos-tip
    :delight ""
    :after flycheck)
#+end_src

*** Language server =lsp-mode=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package lsp-mode
    :after (which-key flycheck yasnippet)
    :hook
    (lsp-mode . lsp-enable-which-key-integration)
    :commands (lsp lsp-deferred)
    :custom
    ;; only show the symbol info
    (lsp-eldoc-render-all nil)
    (lsp-idle-delay 0.6)
    )

  (use-package lsp-ui
    :after lsp-mode
    :commands lsp-ui-mode
    :custom-face
    (markdown-code-face  ((t (:inherit consolas))))
    (lsp-ui-sideline-code-action ((t (:inherit warning))))
    :bind
    (:map lsp-ui-mode-map
          ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
          ([remap xref-find-references] . lsp-ui-peek-find-references)
          ("C-c d" . lsp-ui-doc-focus-frame)
          ("C-c C-f" . lsp-ui-imenu)
          )
    :custom
    ;; lsp-ui-sideline
    (
     (lsp-completion-provider :none)
     (lsp-ui-sideline-show-hover 'nil)
     (lsp-ui-sideline-show-diagnostics t)
     (lsp-ui-sideline-delay 0.2)
     (lsp-ui-sideline-code-actions-prefix " ")
     (lsp-ui-sideline-show-code-actions t)
     ;; symbol is already shown by eldoc and ui-doc
     (lsp-ui-sideline-show-symbol t)
     (lsp-ui-sideline-update-mode 'point)

     ;; lsp-ui-doc
     (lsp-ui-doc-enable t)
     (lsp-ui-doc-include-signature t)
     (lsp-ui-doc-position 'at-point)
     (lsp-ui-doc-delay 0.2)
     (lsp-ui-doc-max-height 13)
     (lsp-ui-doc-max-width 150)
     (lsp-ui-doc-show-with-cursor t)

     ;; lsp-ui-peek
     (lsp-ui-peek-always-show nil)
     (lsp-ui-peek-enable)
     (lsp-ui-peek-show-directory t)
     (lsp-ui-peek-list-width 30)
     (lsp-ui-peek-peek-height 30)
     (lsp-eldoc-enable-hover t))
    ;; lsp-ui-imenu
    :hook (lsp-mode . lsp-ui-mode)
    )

  (use-package lsp-ivy
    :after (lsp-mode ivy)
    :bind
    (:map projectile-mode-map
          ([remap projectile-ag] . lsp-ivy-workspace-symbol))
    :commands lsp-ivy-workspace-symbol)
#+END_SRC

#+RESULTS:
: lsp-ivy-workspace-symbol

*** Programming language
**** semantic highlighting =color-identifiers-mode=
#+begin_src emacs-lisp :tangle yes
  (use-package color-identifiers-mode
    :config (global-color-identifiers-mode)
    :custom
    (color-identifiers:recoloring-delay 0.2))
#+end_src

**** Shell script =shfmt=

#+begin_src emacs-lisp :tangle yes
  (use-package shfmt
    :ensure-system-package shfmt
    :delight ""
    )

  ;; (flycheck-define-checker sh-shellcheck
  ;; "A shell script syntax checker using ShellCheck."
  ;; :command ("shellcheck" "-x" "-f" "checkstyle"
  ;;           source-inplace)
  ;; :error-parser flycheck-parse-checkstyle
  ;; :modes (sh-mode
  ;;         ksh-mode
  ;;         bash-mode
  ;;         shen-mode
  ;;         zsh-mode))
#+end_src

#+RESULTS:

**** Javascript =js2-mode, tide, pretier-js=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package js2-mode
    :mode "\\.[jt]s\\'"
    :hook (js2-mode . eldoc-mode))

  (use-package tide
    :after js2-mode
    :hook
    (
     (js2-mode . tide-setup)
     (before-save . tide-format-before-save)))

  (use-package prettier-js
    :ensure-system-package (prettier . "npm -g prettier-js")
    :hook ((js2-mode . prettier-js-mode)))
#+END_SRC

#+RESULTS:
| tide-setup | prettier-js-mode | eldoc-mode |

**** Rust =rustic-mode=
cargo gives set of combination to perform cargo (rust builder) task
rustic takes care of starting.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (defun find-cargo-files-in-project ()
  ;;   "Return a list of paths to all Cargo.toml files in the current project."
  ;;   (when (projectile-project-p)
  ;;     (projectile-files-from-cmd "find -name Cargo.toml" (projectile-project-root))))

  ;; (defun my/update-lsp-rust-analyzer-linked-projects ()
  ;;   "Update the projects imported by rust-analyzer"
  ;;   (interactive)
  ;;   (let ((cargo-files (find-cargo-files-in-project)))
  ;;     (if cargo-files
  ;;         (setq lsp-rust-analyzer-linked-projects cargo-files)
  ;;       (message "No Cargo files found in the current Projectile project."))))
  ;;   (defun update-linked-projects-hook ()
  ;;     "Custom hook for Rustic mode."
  ;;     (my/update-lsp-rust-analyzer-linked-projects))
  ;;   (add-hook 'rustic-mode-hook update-linked-projects-hook)
  (use-package rustic
    :delight " "
    :mode ("\\.rs$" . rustic-mode)
    :bind
    (:map rustic-mode-map
          ;; Using the M-. and M-? as described in the lsp package
          ;;               ("C-c C-f" . lsp-ui-peek-find-definition)
          ;;               ("C-c C-l" . lsp-ui-peek-find-implementation)
          ;; The following should be moved to the lsp package I guess ? :shrug:
          ("C-c C-c ?" . lsp-describe-thing-at-point)
          ("C-c C-c !" . lsp-execute-code-action)
          ("C-c C-c r" . lsp-rename)
          ("C-c C-c q" . lsp-workspace-restart)
          ("C-c C-c Q" . lsp-workspace-shutdown)
          ("C-c C-c f" . rustic-format-buffer)
          ("C-c C-c e" . lsp-rust-analyzer-expand-macro)
          ("C-c C-c s" . lsp-rust-analyzer-status)
          ("C-c C-c C-a" . rustic-cargo-add)
          ("C-c C-c C-d" . rustic-cargo-rm)
          ("C-c C-c C-u" . rustic-cargo-upgrade)
          ("C-c C-c C-o" . rustic-cargo-outdated))
    :custom
    (rustic-lsp-server 'rust-analyzer)
    (lsp-rust-analyzer-cargo-watch-command "clippy")
    (rustic-format-on-save t)
    (rustic-format-display-method 'pop-to-buffer)
    :config

    (push 'rustic-clippy flycheck-checkers)
    ;; this works expect for the line
    (custom-set-faces
     `(rustic-message ((t (:foreground ,(xresources-theme-color "color14" )))))
     `(rustic-compilation-column ((t (:foreground ,(xresources-theme-color "color12" )))))
     `(rustic-compilation-line ((t (:foreground ,(xresources-theme-color "color12" )))))
     `(rustic-compilation-error ((t (:foreground ,(xresources-theme-color "color5" )))))
     `(rustic-compilation-info ((t (:foreground ,(xresources-theme-color "color11" )))))
     `(rustic-compilation-warning ((t (:foreground ,(xresources-theme-color "color9" ))))))
    )
#+END_SRC

#+RESULTS:
: rustic-cargo-outdated

**** Docker =dockerfile-mode=

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dockerfile-mode
    :mode (("^Dockerfile$" . dockerfile-mode)
           ("^compose.yml$" . dockerfile-mode)))
#+END_SRC

**** terraform =dockerfile-mode=

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package terraform-mode
    :mode
    (("\\.tf\\'" . terraform-mode)
     ("\\.tfvars\\'" . terraform-mode))
    :custom
    ((terraform-indent-level 4)
     (terraform-format-on-save t)))
#+END_SRC

#+RESULTS:
: ((\.tfvars\' . terraform-mode) (\.tf\' . terraform-mode) (\.t\(f\(vars\)?\|ofu\)\' . terraform-mode) (\.nomad\' . hcl-mode) (\.hcl\' . hcl-mode) (^compose.yml$ . dockerfile-mode) (^compose.ya+ml$ . dockerfile-mode) (^yang\.settings$ . jsonc-mode) (dune$ . dune-mode) ([./]opam_?\' . tuareg-opam-mode) (\.mly\' . tuareg-menhir-mode) (\.eliomi?\' . tuareg-mode) (\.ml[ip]?\' . tuareg-mode) (\.json$ . json-mode) (\.ml[ily]?$ . tuareg-mode) (^Dockerfile$ . dockerfile-mode) (\.rs$ . rustic-mode) (\.[jt]s\' . js2-mode) (\.tsv\' . tsv-mode) (\.[Cc][Ss][Vv]\' . csv-mode) (\.dockerfile\' . dockerfile-mode) ([/\]\(?:Containerfile\|Dockerfile\)\(?:\.[^/\]*\)?\' . dockerfile-mode) (\(?:\`\|/\)dune\(?:\.inc\|\-project\|\-workspace\)?\' . dune-mode) (\(?:\(?:\.\(?:b\(?:\(?:abel\|ower\)rc\)\|json\(?:ld\)?\)\|composer\.lock\)\'\) . json-mode) (/git-rebase-todo\' . git-rebase-mode) (\.rs\' . rustic-mode) (\.\(?:md\|markdown\|mkd\|mdown\|mkdn\|mdwn\)\' . markdown-mode) (\.sol\' . solidity-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Brew\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.cs\' . csharp-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.webp\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.dir-locals\(?:-2\)?\.el\' . lisp-data-mode) (\.eld\' . lisp-data-mode) (eww-bookmarks\' . lisp-data-mode) (tramp\' . lisp-data-mode) (/archive-contents\' . lisp-data-mode) (places\' . lisp-data-mode) (\.emacs-places\' . lisp-data-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|sls\|sld\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (/PKGBUILD\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|squashfs\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\|SQUASHFS\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . js-json-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) (\.erts\' . erts-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|EPUB\|CBZ\|FB2\|O?XPS\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|epub\|cbz\|fb2\|o?xps\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.mailmap\' . conf-unix-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.heic\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))

**** OCaml
***** load opam
Setup environment variables and opam-lib using opam
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun shell-cmd (cmd)
    "Returns the stdout output of a shell command or nil if the command returned
       an error"
    (car (ignore-errors (apply 'process-lines (split-string cmd)))))

  (setq opam-p (shell-cmd "which opam"))
  (if opam-p
      (dolist (var (car (read-from-string (shell-command-to-string "opam config env --sexp"))))
        (setenv (car var) (cadr var))))

  (if opam-p
      (let ((opam-share (ignore-errors (car (process-lines "opam" "config" "var" "share")))))
        (when (and opam-share (file-directory-p opam-share))
          (add-to-list 'load-path (expand-file-name "emacs/site-lisp" opam-share)))))
#+END_SRC

***** load major mode =caml= =tuareg=

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package caml) ; needed for merlin
  (use-package tuareg
    :ensure nil ; It's installed with opam
  ;;   :if opam-p
    :mode ("\\.ml[ily]?$" . tuareg-mode)
    :custom
    (comment-style "indent"))
#+END_SRC

***** helpers

****** builder =dune=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dune
    :after tuareg
    :delight " "
    :mode ("dune$" . dune-mode)
    :if opam-p)
#+END_SRC

****** completion, type, doc,... =merlin=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package merlin
    :custom
    (merlin-completion-with-doc t)
    :bind (:map merlin-mode-map
                ("M-." . merlin-locate)
                ("M-," . merlin-pop-stack)
                ("M-?" . merlin-occurrences)
                ("C-c C-j" . merlin-jump)
                ("C-c i" . merlin-locate-ident)
                ("C-c C-e" . merlin-iedit-occurrences)
                )
    :hook
    ;; Start merlin on ml files
    ((tuareg-mode caml-mode) . merlin-mode)
    )

  (use-package merlin-eldoc
    :after merlin
    :custom
    (eldoc-echo-area-use-multiline-p t) ; use multiple lines when necessary
    (merlin-eldoc-max-lines 8)          ; but not more than 8
    (merlin-eldoc-type-verbosity 'min)  ; don't display verbose types
    (merlin-eldoc-function-arguments nil) ; don't show function arguments
    (merlin-eldoc-doc t)                ; don't show the documentation
    :bind (:map merlin-mode-map
                ("C-c o p" . merlin-eldoc-jump-to-prev-occurrence)
                ("C-c o n" . merlin-eldoc-jump-to-next-occurrence))
    :hook (tuareg-mode . merlin-eldoc-setup))

  (use-package flycheck-ocaml
    :after merlin tuareg
    :custom
    (merlin-error-after-save nil)
    :hook
    (tuareg-mode . flycheck-ocaml-setup))
#+END_SRC
****** format =ocamlformat=
it format also dune file, which is annoying
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ocamlformat
    :ensure nil
    :custom
    (ocamlformat-enable 'enable-outside-detected-project)
    (ocamlformat-show-errors 'echo)
    :hook (before-save . ocamlformat-before-save))
#+END_SRC
**** sql =sql-indent=
#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package sql-indent
      :after sql-mode
      :delight "")
#+END_SRC

#+RESULTS:

*** Description language
**** csv =csv-mode=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package csv-mode
      :delight ""
    :mode "\\.[Cc][Ss][Vv]\\'"
    :custom
    (csv-separators '(";" ",")))
#+END_SRC

**** =Json=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package json-mode
    :delight " "
    :mode ("\\.json$" . json-mode))
#+END_SRC
#+begin_src emacs-lisp :tangle yes
  (use-package yaml-mode
    :disabled
    :mode "\\.yml\\'"
    )
#+end_src

* Project
** interaction =projectile=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package projectile
    :delight
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :custom
    (projectile-grep-default-files "src/")
    (projectile-project-search-path '("~/CS/Project/"))
    (projectile-completion-system 'ivy)
    (projectile-sort-order 'recentf)
    (projectile-mode-line-prefix " ")
    :init (projectile-mode))

  (use-package counsel-projectile
    :after (counsel projectile)
    :init (counsel-projectile-mode)
    :config
    (counsel-projectile-modify-action
     'counsel-projectile-switch-project-action
     '((default counsel-projectile-switch-project-action-vc)))
    )
#+END_SRC

#+RESULTS:
: t

** Git
*** Git interaction =magit=
It is quite common to work on Git repositories, so it is important to have a
configuration that we like.
#+BEGIN_QUOTE
[[https://github.com/magit/magit][Magit]] is an interface to the version control system Git, implemented as an Emacs
package. Magit aspires to be a complete Git porcelain. While we cannot (yet)
claim that Magit wraps and improves upon each and every Git command, it is
complete enough to allow even experienced Git users to perform almost all of
their daily version control tasks directly from within Emacs. While many fine
Git clients exist, only Magit and Git itself deserve to be called porcelains.
[[https://github.com/tarsius][Jonas Bernoulli]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package magit
    :delight " "
    :hook
    (after-save . magit-after-save-refresh-buffers))
#+END_SRC

# *** add git message =git-commit=
# #+BEGIN_SRC emacs-lisp :tangle yes
#   (use-package git-commit
#     :after magit
#     :hook (git-commit-mode . my/git-commit-auto-fill-everywhere)
#     :custom (git-commit-summary-max-length 50)
#     :preface
#     (defun my/git-commit-auto-fill-everywhere ()
#       "Ensures that the commit body does not exceed 72 characters."
#       (setq fill-column 72)
#       (setq-local comment-auto-fill-only-comments nil)))
# #+END_SRC

*** current modification =git-gutter=
In addition to that, I like to see the lines that are being modified in the file
while it is being edited.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package git-gutter
    :delight
    :init (global-git-gutter-mode t))
#+END_SRC
*** show last commit modification =git-timemachine=
Easily see the changes made by previous commits.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package git-timemachine :delight)
#+END_SRC

* System interaction
** File explorer =dired=
Dired is a major mode for exploring file

dired-x is a minor that brings a lot to dired like hidding
- uninteresting file
- guessing which command to call...

  dired-du give the size of directory using du or lisp

  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package dired
      :delight " "
      :ensure nil
      :bind (:map dired-mode-map
                  ("RET" . dired-find-alternate-file)
                  ("^" . (lambda () (interactive) (find-alternate-file ".."))))
      :config
      (put 'dired-find-alternate-file 'disabled nil) ; disables warning
      :custom
      (dired-auto-revert-buffer t)
      (dired-dwim-target t)
      (dired-hide-details-hide-symlink-targets nil)
      (dired-omit-files "^\\...+$")
      (dired-omit-mode t)
      (dired-listing-switches "-alh")
      (dired-ls-F-marks-symlinks nil)
      (dired-recursive-copies 'always))

    (use-package dired-du
      :delight ""
      :after dired) ; recursive size of files

    (use-package all-the-icons-dired ; icons
      :after dired
      :delight ""
      :config
      (all-the-icons-dired-mode))

    (use-package dired-x
      :delight ""
      :ensure nil
      :after dired)
  #+END_SRC

#+END_SRC
** Environment variable
One of the next two is useless, need to determine wich one
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package keychain-environment
    :config (keychain-refresh-environment))
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-copy-env "SSH_AGENT_PID")
    (exec-path-from-shell-copy-env "SSH_AUTH_SOCK"))
#+end_SRC
* Organiser/calendar/linker/etc =org-mode=
Amazing mode of GNU Emacs.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org
    ;; ensure org-plus-contrib ;; nowhere to be found
    :delight " "
    :bind
    ("C-c l" . org-store-link)
    ("C-c a" . org-agenda)
    ("C-c c" . org-capture)
    ("C-c B" . org-switchb)

    (:map org-mode-map ("C-c o" . counsel-outline))
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages '((calc . t)))
    :custom
    (org-ellipsis " ⤵")
    (org-use-extra-keys t)
    (org-catch-invisible-edits 'show-and-error)
    (org-cycle-separator-lines 0)
    (org-refile-use-outline-path 'file)
    (org-outline-path-complete-in-steps nil)
    (org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
    :hook
    ((after-save . my/config-tangle)
     (org-edit-src-save  . delete-trailing-whitespace)
     (auto-save . org-save-all-org-buffers)))
#+END_SRC

** Table of content =toc-org=
Create and update automaticaly a table of contents.  =toc-org= will maintain a
table of contents at the first heading that has a =:TOC:= tag.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package toc-org
    :after org
    :hook (org-mode . toc-org-enable))
#+END_SRC

** Org indentation =org-indent=
For a cleaner inline mode.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-indent
    :delight
    :ensure nil
    :hook (org-mode . org-indent-mode))
#+END_SRC

** Bullets =org-bullets=
Prettier [[https://github.com/sabof/org-bullets][bullets]] in org-mode.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom (org-bullets-bullet-list '("●" "▲" "■" "✶" "◉" "○" "○")))
#+END_SRC
** org face
Foreground and the weight (bold) of each keywords.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-faces
    :ensure nil
    :after org
    :custom
    (org-todo-keyword-faces
     '(
       ("BOOK"       . (:foreground "red"    :weight bold))
       ("GO"         . (:foreground "orange" :weight bold))

       ("WENT"       . (:foreground "green"))
       ("CANCELED"   . (:foreground "grey" ))


       ("SOMEDAY"    . (:foreground "blue" ))
       ("TODO"       . (:foreground "red"    :weight bold))
       ("INPROGRESS" . (:foreground "orange" :weight bold))
       ("WAITING"    . (:foreground "yellow" :weight bold))

       ("DONE"       . (:foreground "green"))
       ("ABORDED"    . (:foreground "grey" ))

       ("IDEA"       . (:foreground "cyan"))
       ("FETCH"      . (:foreground "red" ))
       ("GIVE"       . (:foreground "orange"))

       ("FETCHED"    . (:foreground "green"))
       ("GIVEN"      . (:foreground "green"))

       ("USE"        . (:foreground "red"    :weight bold))
       ("CONSUMED"   . (:foreground "green"  :weight bold))
       ("LOST"       . (:foreground "grey"))
       )))
#+END_SRC

#+RESULTS:
** Org agenda
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-agenda
    :ensure nil
    :delight " "
    :after org
    :custom
    (org-directory "~/org/")
    (org-agenda-files '("~/org/"))
    (org-agenda-dim-blocked-tasks t)
    (org-agenda-inhibit-startup t)
    (org-agenda-sticky t)
    (org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " " ""))
    (org-enforce-todo-dependencies t)
    (org-habit-graph-column 80)
    (org-habit-show-habits-only-for-today nil)
    (org-track-ordered-property-with-tag t)
    (org-agenda-todo-ignore-timestamp 'future)
    (org-agenda-todo-ignore-scheduled 'future)
    (org-agenda-todo-ignore-deadline  'far)
    (org-agenda-skip-scheduled-if-done t)
    (org-agenda-skip-scheduled-if-deadline-is-shown t)
    (org-agenda-skip-deadline-if-done t)
    (org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
    (org-agenda-skip-timestamp-if-deadline-is-shown t)
    (org-agenda-skip-timestamp-if-done t)
    (org-agenda-clockreport-mode t)
    (org-agenda-clockreport-parameter-plist
    '(:link t :maxlevel 4 :fileskip0 t :compact t :formula % :hidefiles t)))
#+END_SRC

*** improved agenda view =org-super-agenda=
Org super agenda allows a more readible agenda by grouping the todo item
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-super-agenda
    :init (org-super-agenda-mode)
    :custom
    (org-agenda-custom-commands
     '(("o" "Overview of agenda and todo"
        ((agenda ""
                 (
                  (org-agenda-span '1)
                  (org-super-agenda-groups
                   '(
                     (:name "Agenda" :time-grid t)
                     (:name "Scheduled" :scheduled t)
                     (:name "Deadline"  :deadline t)
                     ))))
         (alltodo ""
                  ((org-super-agenda-groups
                    '(
                      (:name "Work tasks"   :tag "TEZOS")
                      (:name "Book"         :todo "BOOK")
                      (:name "Tasks"
                             :and
                             (
                              :category "agenda"
                              :todo ("TODO" "INPROGRESS" "WAITING")
                              :not (:tag ("config" "HOME" "GARDEN" "PROJECT" ))
                              ))
                      (:name "Home"
                             :and
                             (
                              :category "agenda"
                              :tag "HOME"
                              :todo ("TODO" "INPROGRESS" "WAITING")
                              ))
                      (:name "Garden"
                             :and
                             (
                              :category "agenda"
                              :tag "GARDEN"
                              :todo ("TODO" "INPROGRESS" "WAITING")
                              ))
                      (:name "Project"
                             :and
                             (
                              :category "agenda"
                              :tag "PROJECT"
                              :todo ("TODO" "INPROGRESS" "WAITING")
                              ))
                      (:name "Config"
                             :and
                             (
                              :tag "config"
                              :todo ("TODO" "INPROGRESS" "WAITING")
                              )
                             )
                      (:name "Daily" :and (:todo "FETCH" :tag "daily"))
                      (:name "Fetch" :and (:todo "FETCH" :not (:tag "movie")))
                      (:name "Download" :and (:todo "FETCH" :tag "movie"))
                      ))))
         )))))
#+END_SRC

#+RESULTS:

*** TODO calendar view =calfw=
It's buggy, the view show an event starting on each day it set
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package calfw :after org-agenda)

  (use-package calfw-org
    :after calfw
    :bind ("C-c z" . cfw:open-org-calendar)
    :custom
    (calendar-week-start-day 0) ; 0:Sunday, 1:Monday
    (cfw:org-overwrite-default-keybinding t)
    (cfw:org-agenda-schedule-args '(:timestamp))
    ;; Another unicode chars
    (cfw:fchar-junction ?╬)
    (cfw:fchar-vertical-line ?║)
    (cfw:fchar-horizontal-line ?=)
    (cfw:fchar-left-junction ?╠)
    (cfw:fchar-right-junction ?╣)
    (cfw:fchar-top-junction ?╦)
    (cfw:fchar-top-left-corner ?╔)
    (cfw:fchar-top-right-corner ?╗)
    ;;   :config
    ;;   ;; hotfix: incorrect time range display
    ;;   ;; source: https://github.com/zemaye/emacs-calfw/commit/3d17649c545423d919fd3bb9de2efe6dfff210fe
    ;;   (defun cfw:org-get-timerange (text)
    ;;     "Return a range object (begin end text). If TEXT does not have a range, return nil."
    ;;     (let* ((dotime (cfw:org-tp text 'dotime)))
    ;;       (and (stringp dotime) (string-match org-ts-regexp dotime)
    ;;            (let* ((matches  (s-match-strings-all org-ts-regexp dotime))
    ;;                   (start-date (nth 1 (car matches)))
    ;;                   (end-date (nth 1 (nth 1 matches)))
    ;;                   (extra (cfw:org-tp text 'extra)))
    ;;              (if (string-match "(\\([0-9]+\\)/\\([0-9]+\\)): " extra)
    ;;                  ( list( calendar-gregorian-from-absolute
    ;;                          (time-to-days
    ;;                           (org-read-date nil t start-date))
    ;;                          )
    ;;                        (calendar-gregorian-from-absolute
    ;;                         (time-to-days
    ;;                          (org-read-date nil t end-date))) text))))))
    )
#+END_SRC


*** Caldav sync =org-caldav=
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package org-caldav
  ;;   :init
  ;;   (defun org-caldav-sync-at-close ()
  ;;     (org-caldav-sync)
  ;;     (save-some-buffers))
  ;;   (defvar org-caldav-sync-timer nil
  ;;     "Timer that `org-caldav-push-timer' used to reschedule itself, or nil.")
  ;;   (defun my/org-caldav-sync-with-delay (secs)
  ;;     (when org-caldav-sync-timer (cancel-timer org-caldav-sync-timer))
  ;;     (setq org-caldav-sync-timer
  ;;           (run-with-idle-timer (* 1 secs) nil 'org-caldav-sync)))
  ;;   :custom
  ;;   (org-caldav-url "https://cloud.cowfa.xyz/remote.php/dav/calendars/baroud/")
  ;;   (org-caldav-backup-file "~/org/org-caldav-backup.org")
  ;;   (org-icalendar-alarm-time 10) ; set alarm 10 minutes before for calendar
  ;;   (org-caldav-show-sync-results nil)
  ;; ;;   (org-icalendar-include-todo nil)
  ;; ;;   (org-caldav-sync-todo nil)
  ;;   (org-caldav-delete-calendar-entries 'always)
  ;; ;;   (org-caldav-todo-percent-states
  ;; ;;    '((1 "BOOK") (99 "CANCELED") (0 "TODO") (2 "INPROGRESS")
  ;; ;;      (3 "WAITING") (4 "SOMEDAY") (100 "DONE") (98 "ABORDED")
  ;; ;;      (5 "IDEA") (6 "WANT") (7 "FETCH") (8 "GIVE") (97 "HAVE")
  ;; ;;      (96  "GIVEN") (9 "USE") (96 "CONSUMED") (95 "LOST")))
  ;;   (org-caldav-resume-aborted 'never)
  ;;   :config
  ;;   (setq org-caldav-calendars
  ;;         '((:calendar-id "master"
  ;;                         :files ("~/org/master.org")
  ;;                         :inbox (file+headline "~/org/master.org" "sync"))
  ;;           (:calendar-id "claire"
  ;;                         :files ("~/org/claire.org")
  ;;                         :inbox (file+headline "~/org/claire.org" "sync"))
  ;;           (:calendar-id "billy"
  ;;                         :files ("~/org/billy.org")
  ;;                         :inbox (file+headline "~/org/billy.org" "sync"))
  ;;           ))
  ;;   (setq org-icalendar-use-deadline
  ;;         '(event-if-todo-not-done todo-due))
  ;;   (setq org-icalendar-use-scheduled
  ;;         '(todo-start event-if-todo-not-done))
  ;;   :hook
  ;;   ( (kill-emacs . org-caldav-sync-at-close)
  ;;     (after-save
  ;;      .
  ;;      (lambda ()
  ;;        (when (eq major-mode 'org-mode)
  ;;          (my/org-caldav-sync-with-delay 300))))))
#+END_SRC

*** notification =org-wild-notifier=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-wild-notifier
    :after (org-agenda alert)
    :custom
    (org-wild-notifier-keyword-whitelist nil)
    (org-wild-notifier-keyword-blacklist '("CANCELED" "DONE" "ABORDED" "HAVE" "GIVEN" "CONSUMED" "LOST"))
    (org-wild-notifier--day-wide-events t)
    (org-wild-notifier-alert-time '(120 60 30 10 5))
    :init (org-wild-notifier-mode t))
#+END_SRC

** Org link
[[gmap:test test][test test]]
#+begin_src emacs-lisp :tangle yes
  (setq
   org-link-abbrev-alist
   '(("google"    . "http://www.google.com/search?q=")
     ("ddg"       . "https://duckduckgo.com/?q=")
     ("gmaps"     . "http://maps.google.com/maps?q=%s")
     ("omap"      . "http://nominatim.openstreetmap.org/search?q=%s&polygon=1")))

#+end_src

** clock =org-clock=
#+begin_src emacs-lisp :tangle yes
  (use-package counsel-org-clock
    :after org
    :bind
    ("C-c t g" . counsel-org-clock-goto)
    ("C-c t g" . counsel-org-clock-history)
    )
#+end_src

#+RESULTS:

** Capture =org-capture=
=org-capture= templates saves you a lot of time when adding new entries. I use
it to quickly record tasks, ledger entries, notes and other semi-structured
information.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-capture
    :ensure nil
    :after org
    :preface
    (defvar my/with "%^{With |Sylvain|Claire|Adrien|Ada|Bernadat|P&C|A&D|B&J}")
    (defvar my/place "%^{Place |78 rue Hippolyte Kahn, Villeurbanne |17 rue Crozatier, Paris |12 ter rue Etienne Cardaire, Montpellier |12 rue Jules Ferry, Ivry-sur-seine |18 rue du square Carpeaux, Paris}")

    (defvar my/org-meeting-template
      (concat
       "* %^{Name}
  :PROPERTIES:
  :CREATED: %U
  :END:
  %^{When}t
  "))
  ;; :LOCATION: " my/place "
  ;; :WITH:    " my/with "



    (defvar my/org-voucher-template
      "* USE %^{Value}
    DEADLINE:%^{Before}t
    :PROPERTIES:
    :REDUCTION:     %^{Reduction}
    :COMPANY:     %^{At|oui.sncf|ouibus|ouigo...}
    :END:


  %?
  ")

    (defvar my/org-task-template
      "* TODO %^{What}
    :PROPERTIES:
    :CREATED:     %U
    :END:


  %?
  ")

    (defvar my/org-review-template
      "* TODO [[https://gitlab.com/tezos/tezos/-/merge_requests/%^{number}][%^{What is it about}]]
    :PROPERTIES:
    :CREATED:     %U
    :END:


  %?
  ")

    (defvar my/org-someday-template
      "* SOMEDAY %^{What} %^G
    :PROPERTIES:
    :CREATED:     %U
    :END:


  %?
  ")

    (defvar my/org-fetch-template
      "* FETCH %^{What}
    :PROPERTIES:
    :CREATED:     %U
    :END:


  %?
  ")

    (defvar my/org-gift-template
      "* IDEA %^{What}
    :PROPERTIES:
    :CREATED: %U
    :FOR: %^{For}
    :WHEN: %^{When}t
    :END:

  %?
  ")

    (defvar my/org-journal-template
      "* %^{My though}
  :PROPERTIES:
  :CREATED: %U
  :END:


  %?")

    (defvar my/org-bookmark-desc-template
      "* [[%:link][%:description]]
  :PROPERTIES:
  :CREATED: %U
  ,#+BEGIN_QUOTE
  %i
  ,#+END_QUOTE
  :END:


  %?")

    (defvar my/org-bookmark-template
      "* [[%:link][%:description]]
  :PROPERTIES:
  :CREATED: %U
  :END:

  %?
  ")

    :custom
    (org-capture-templates
     `(("a" "Appointment"
        entry (file+headline "~/org/master.org" "Agenda"),
        my/org-meeting-template)
       ("s" "stuff")
       ("sf" "fetch"
        entry (file+headline "~/org/master.org" "Stuff"),
        my/org-fetch-template)
       ("sg" "gift"
        entry (file+headline "~/org/master.org" "Stuff"),
        my/org-gift-template)
       ("t" "Tasks")
       ("tt" "Todo"
        entry (file+headline "~/org/master.org" "Tasks"),
        my/org-task-template)
       ("tr" "Review"
        entry (file+olp "~/org/master.org" "Work tasks" "Octez Merge-Team" "Review"),
        my/org-review-template)
       ("to" "One day"
        entry (file+headline "~/org/master.org" "Tasks"),
        my/org-someday-template)
       ("v" "Voucher"
        entry (file+headline "~/org/master.org" "Voucher"),
        my/org-voucher-template)
       ("j" "Journal"
        entry (file+olp+datetree "~/org/master.org" "Journal"),
        my/org-journal-template)
       ("p" "Bookmark-description"
        entry (file+headline ,"~/org/master.org" "Bookmarks"),
        my/org-bookmark-desc-template)
       ("L" "Bookmark"
        entry (file+headline ,"~/org/master.org" "Bookmarks"),
        my/org-bookmark-template)

       )))
#+END_SRC

#+RESULTS:


* read-only major-mode
** compilation
add ansi color to the compilation buffer
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ansi-color
    :config
    (defun my/colorize-compilation-buffer ()
      (when (eq major-mode 'compilation-mode)
        (ansi-color-apply-on-region compilation-filter-start (point-max))))
    :hook
    (compilation-filter . my/colorize-compilation-buffer))
#+END_SRC
* TODO update my conf using [[https://github.com/alhassy/emacs.d#emacs-vs-initorg][config]]
